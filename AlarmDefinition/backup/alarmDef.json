[
  {
    "key": "cm/values/18-smpc-cluster/datastorages/esaconfig/smpc",
    "flags": 0,
    "value": ""
  },
  {
    "key": "cm/values/18-gmpc-cluster/datastorages/esaconfig/gmpc",
    "flags": 0,
    "value": ""
  },
  {
    "key": "cm/values/18-smpc-cluster/datastorages/esaconfig/hw",
    "flags": 0,
    "value": ""
  },
  {
    "key": "cm/values/18-gmpc-cluster/datastorages/esaconfig/hw",
    "flags": 0,
    "value": ""
  },
  {
    "key": "cm/values/18-aecid-cluster/datastorages/esaconfig/aecid",
    "flags": 0,
    "value": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxlc2E6YWxhcm1EZWZpbml0aW9ucyB4bWxuczplc2E9Imh0dHA6Ly93d3cuZXJpY3Nzb24uY29tL2VzYSIgeG1sbnM9Imh0dHA6Ly93d3cuZXJpY3Nzb24uY29tL2VzYSI+DQogICAgPGVzYTphbGFybVNwZWNpZmljYXRpb24gYWN0aXZlPSJ5ZXMiPg0KCQk8ZXNhOm1vZHVsZUlkPkFlY2lkPC9lc2E6bW9kdWxlSWQ+DQoJCTxlc2E6ZXJyb3JDb2RlPjEwMDwvZXNhOmVycm9yQ29kZT4NCgkJPGVzYTpzZXZlcml0eT40PC9lc2E6c2V2ZXJpdHk+DQoJCTxlc2E6bW9kZWxEZXNjcmlwdGlvbj5BZWNpZDwvZXNhOm1vZGVsRGVzY3JpcHRpb24+DQoJCTxlc2E6YWN0aXZlRGVzY3JpcHRpb24+UHJvY2Vzc2luZyBlcnJvcjwvZXNhOmFjdGl2ZURlc2NyaXB0aW9uPg0KCQk8ZXNhOmV2ZW50VHlwZT40PC9lc2E6ZXZlbnRUeXBlPg0KCQk8ZXNhOnByb2JhYmxlQ2F1c2U+MTYxPC9lc2E6cHJvYmFibGVDYXVzZT4NCgkJPGVzYTpkb2N1bWVudGF0aW9uPg0KCQkJPGVzYTpkZXNjcmlwdGlvbj4NCgkJCSAgVGhlIGZpbGUgaXMgY29ycnVwdCBvciBkb2VzIG5vdCBleGlzdC4NCgkJCTwvZXNhOmRlc2NyaXB0aW9uPg0KCQkJPGVzYTphbGFybWluZ09iamVjdD4NCgkJCSAgQWVjaWQNCgkJCTwvZXNhOmFsYXJtaW5nT2JqZWN0Pg0KCQkJPGVzYTpyYWlzZWRCeT4NCgkJCSAgTWVhc3VyZW1lbnQgRmlsZSBJbXBvcnQgRmFpbGVkDQoJCQk8L2VzYTpyYWlzZWRCeT4NCgkJCTxlc2E6Y2xlYXJlZEJ5Pg0KCQkJICBNZWFzdXJlbWVudCBGaWxlIEltcG9ydCBTdWNjZXNzZnVsDQoJCQk8L2VzYTpjbGVhcmVkQnk+DQoJCQk8ZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KCQkJICBDaGVjayB0aGUgaW50ZWdyaXR5IG9mIHRoZSBmaWxlIGFuZCB0aGUgZmlsZSBwZXJtaXNzaW9ucy4NCgkJCTwvZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KCQk8L2VzYTpkb2N1bWVudGF0aW9uPg0KCTwvZXNhOmFsYXJtU3BlY2lmaWNhdGlvbj4NCgk8ZXNhOmFsYXJtU3BlY2lmaWNhdGlvbiBhY3RpdmU9InllcyI+DQoJCTxlc2E6bW9kdWxlSWQ+QWVjaWQ8L2VzYTptb2R1bGVJZD4NCgkJPGVzYTplcnJvckNvZGU+MTAxPC9lc2E6ZXJyb3JDb2RlPg0KCQk8ZXNhOnNldmVyaXR5PjQ8L2VzYTpzZXZlcml0eT4NCgkJPGVzYTptb2RlbERlc2NyaXB0aW9uPkFlY2lkPC9lc2E6bW9kZWxEZXNjcmlwdGlvbj4NCgkJPGVzYTphY3RpdmVEZXNjcmlwdGlvbj5Qcm9jZXNzaW5nIGVycm9yPC9lc2E6YWN0aXZlRGVzY3JpcHRpb24+DQoJCTxlc2E6ZXZlbnRUeXBlPjQ8L2VzYTpldmVudFR5cGU+DQoJCTxlc2E6cHJvYmFibGVDYXVzZT4xNjE8L2VzYTpwcm9iYWJsZUNhdXNlPg0KCQk8ZXNhOmRvY3VtZW50YXRpb24+DQoJCQk8ZXNhOmRlc2NyaXB0aW9uPg0KCQkJICBUaGUgZGlyZWN0b3J5IGlzIHdyaXRlIHByb3RlY3RlZCBvciBkb2VzIG5vdCBleGlzdC4NCgkJCTwvZXNhOmRlc2NyaXB0aW9uPg0KCQkJPGVzYTphbGFybWluZ09iamVjdD4NCgkJCSAgQWVjaWQNCgkJCTwvZXNhOmFsYXJtaW5nT2JqZWN0Pg0KCQkJPGVzYTpyYWlzZWRCeT4NCgkJCSAgTWVhc3VyZW1lbnQgRmlsZSBFeHBvcnQgRmFpbGVkDQoJCQk8L2VzYTpyYWlzZWRCeT4NCgkJCTxlc2E6Y2xlYXJlZEJ5Pg0KCQkJICBNZWFzdXJlbWVudCBGaWxlIEV4cG9ydCBTdWNjZXNzZnVsDQoJCQk8L2VzYTpjbGVhcmVkQnk+DQoJCQk8ZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KCQkJICBDaGVjayB0aGUgZGlyZWN0b3J5IHBhdGggYW5kIHRoZSBkaXJlY3RvcnkgcGVybWlzc2lvbnMuDQoJCQk8L2VzYTpwcm9wb3NlZFJlcGFpckFjdGlvbj4NCgkJPC9lc2E6ZG9jdW1lbnRhdGlvbj4NCgk8L2VzYTphbGFybVNwZWNpZmljYXRpb24+DQoJPGVzYTphbGFybVNwZWNpZmljYXRpb24gYWN0aXZlPSJ5ZXMiPg0KCQk8ZXNhOm1vZHVsZUlkPkFlY2lkPC9lc2E6bW9kdWxlSWQ+DQoJCTxlc2E6ZXJyb3JDb2RlPjEwMjwvZXNhOmVycm9yQ29kZT4NCgkJPGVzYTpzZXZlcml0eT40PC9lc2E6c2V2ZXJpdHk+DQoJCTxlc2E6bW9kZWxEZXNjcmlwdGlvbj5BZWNpZDwvZXNhOm1vZGVsRGVzY3JpcHRpb24+DQoJCTxlc2E6YWN0aXZlRGVzY3JpcHRpb24+UHJvY2Vzc2luZyBlcnJvcjwvZXNhOmFjdGl2ZURlc2NyaXB0aW9uPg0KCQk8ZXNhOmV2ZW50VHlwZT40PC9lc2E6ZXZlbnRUeXBlPg0KCQk8ZXNhOnByb2JhYmxlQ2F1c2U+MTYxPC9lc2E6cHJvYmFibGVDYXVzZT4NCgkJPGVzYTpkb2N1bWVudGF0aW9uPg0KCQkJPGVzYTpkZXNjcmlwdGlvbj4NCgkJCSAgVGhlIGRpcmVjdG9yeSBpcyB3cml0ZSBwcm90ZWN0ZWQgb3IgZG9lcyBub3QgZXhpc3QuDQoJCQk8L2VzYTpkZXNjcmlwdGlvbj4NCgkJCTxlc2E6YWxhcm1pbmdPYmplY3Q+DQoJCQkgIEFlY2lkDQoJCQk8L2VzYTphbGFybWluZ09iamVjdD4NCgkJCTxlc2E6cmFpc2VkQnk+DQoJCQkgIFNoYXBlIEZpbGUgR2VuZXJhdGlvbiBGYWlsZWQNCgkJCTwvZXNhOnJhaXNlZEJ5Pg0KCQkJPGVzYTpjbGVhcmVkQnk+DQoJCQkgIFNoYXBlIEZpbGUgR2VuZXJhdGlvbiBTdWNjZXNzZnVsDQoJCQk8L2VzYTpjbGVhcmVkQnk+DQoJCQk8ZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KCQkJICBDaGVjayB0aGUgZGlyZWN0b3J5IHBhdGggYW5kIHRoZSBkaXJlY3RvcnkgcGVybWlzc2lvbnMuDQoJCQk8L2VzYTpwcm9wb3NlZFJlcGFpckFjdGlvbj4NCgkJPC9lc2E6ZG9jdW1lbnRhdGlvbj4NCgk8L2VzYTphbGFybVNwZWNpZmljYXRpb24+DQogICAgPGVzYTphbGFybVNwZWNpZmljYXRpb24gYWN0aXZlPSJ5ZXMiPg0KICAgICAgICA8ZXNhOm1vZHVsZUlkPkFlY2lkPC9lc2E6bW9kdWxlSWQ+DQogICAgICAgIDxlc2E6ZXJyb3JDb2RlPjIxNTwvZXNhOmVycm9yQ29kZT4NCiAgICAgICAgPGVzYTpzZXZlcml0eT4zPC9lc2E6c2V2ZXJpdHk+DQogICAgICAgIDxlc2E6bW9kZWxEZXNjcmlwdGlvbj5BZWNpZDwvZXNhOm1vZGVsRGVzY3JpcHRpb24+DQogICAgICAgIDxlc2E6YWN0aXZlRGVzY3JpcHRpb24+VGhlIGNvbm5lY3Rpb24gdG8gdGhlIGRhdGFiYXNlIGlzIGxvc3QuPC9lc2E6YWN0aXZlRGVzY3JpcHRpb24+DQogICAgICAgIDxlc2E6ZXZlbnRUeXBlPjI8L2VzYTpldmVudFR5cGU+DQogICAgICAgIDxlc2E6cHJvYmFibGVDYXVzZT41NTQ8L2VzYTpwcm9iYWJsZUNhdXNlPg0KICAgICAgICA8ZXNhOmRvY3VtZW50YXRpb24+DQogICAgICAgICAgICA8ZXNhOmRlc2NyaXB0aW9uPg0KCQkJICBUaGUgZGF0YWJhc2UgaXMgbm90IHJ1bm5pbmcgb3IgdGhlIG5ldHdvcmsgaXMgZG93bi4NCgkJCTwvZXNhOmRlc2NyaXB0aW9uPg0KICAgICAgICAgICAgPGVzYTphbGFybWluZ09iamVjdD4NCgkJCSAgQWVjaWQNCgkJCTwvZXNhOmFsYXJtaW5nT2JqZWN0Pg0KICAgICAgICAgICAgPGVzYTpyYWlzZWRCeT4NCgkJCSAgRGF0YWJhc2UgQ29ubmVjdGlvbiBMb3N0DQoJCQk8L2VzYTpyYWlzZWRCeT4NCiAgICAgICAgICAgIDxlc2E6Y2xlYXJlZEJ5Pg0KCQkJICBEYXRhYmFzZSBDb25uZWN0aW9uIEFjdGl2ZQ0KCQkJPC9lc2E6Y2xlYXJlZEJ5Pg0KICAgICAgICAgICAgPGVzYTpwcm9wb3NlZFJlcGFpckFjdGlvbj5DaGVjayB0aGUgbmV0d29yayBjb25uZWN0aW9uIGFuZCB0aGUgZGF0YWJhc2Ugc3RhdHVzLjwvZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KICAgICAgICA8L2VzYTpkb2N1bWVudGF0aW9uPg0KICAgIDwvZXNhOmFsYXJtU3BlY2lmaWNhdGlvbj4NCiAgICA8ZXNhOmFsYXJtU3BlY2lmaWNhdGlvbiBhY3RpdmU9InllcyI+DQogICAgICAgIDxlc2E6bW9kdWxlSWQ+QWVjaWQ8L2VzYTptb2R1bGVJZD4NCiAgICAgICAgPGVzYTplcnJvckNvZGU+MjE2PC9lc2E6ZXJyb3JDb2RlPg0KICAgICAgICA8ZXNhOnNldmVyaXR5PjQ8L2VzYTpzZXZlcml0eT4NCiAgICAgICAgPGVzYTptb2RlbERlc2NyaXB0aW9uPkFlY2lkPC9lc2E6bW9kZWxEZXNjcmlwdGlvbj4NCiAgICAgICAgPGVzYTphY3RpdmVEZXNjcmlwdGlvbj5UaGUgZGF0YWJhc2UgcmVwbGljYXRpb24gZmFpbHMuPC9lc2E6YWN0aXZlRGVzY3JpcHRpb24+DQogICAgICAgIDxlc2E6ZXZlbnRUeXBlPjI8L2VzYTpldmVudFR5cGU+DQogICAgICAgIDxlc2E6cHJvYmFibGVDYXVzZT4xMDI0PC9lc2E6cHJvYmFibGVDYXVzZT4NCiAgICAgICAgPGVzYTpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgICAgPGVzYTpkZXNjcmlwdGlvbj4NCgkJCSAgVGhlIGRhdGFiYXNlIHJlcGxpY2F0aW9uIGlzIG5vdCBydW5uaW5nIG9yIHRoZSByZXBsaWNhdGlvbiBzdGF0ZSBpcyBhYm5vcm1hbC4NCgkJCTwvZXNhOmRlc2NyaXB0aW9uPg0KICAgICAgICAgICAgPGVzYTphbGFybWluZ09iamVjdD4NCgkJCSAgQWVjaWQNCgkJCTwvZXNhOmFsYXJtaW5nT2JqZWN0Pg0KICAgICAgICAgICAgPGVzYTpyYWlzZWRCeT4NCgkJCSAgRGF0YWJhc2UgUmVwbGljYXRpb24gRmFpbGVkDQoJCQk8L2VzYTpyYWlzZWRCeT4NCiAgICAgICAgICAgIDxlc2E6Y2xlYXJlZEJ5Pg0KCQkJICBEYXRhYmFzZSBSZXBsaWNhdGlvbiBSZWNvdmVyZWQNCgkJCTwvZXNhOmNsZWFyZWRCeT4NCiAgICAgICAgICAgIDxlc2E6cHJvcG9zZWRSZXBhaXJBY3Rpb24+DQoJCQkgIENoZWNrIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24gYW5kIHRoZSByZXBsaWNhdGlvbiBzdGF0ZS4NCgkJCTwvZXNhOnByb3Bvc2VkUmVwYWlyQWN0aW9uPg0KICAgICAgICA8L2VzYTpkb2N1bWVudGF0aW9uPg0KICAgIDwvZXNhOmFsYXJtU3BlY2lmaWNhdGlvbj4JDQoNCjwvZXNhOmFsYXJtRGVmaW5pdGlvbnM+DQo="
  },
  {
    "key": "cm/values/18-aecid-cluster/datastorages/esaconfig/hw",
    "flags": 0,
    "value": ""
  }

]