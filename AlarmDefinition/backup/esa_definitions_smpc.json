[{
	"flags": 0,
	"key": "cm/values/[VERSION]-[NODE]-[CLUSTER]/datastorages/esaconfig/smpc",
	"value": "<?xml version="1.0" encoding="UTF-8"?>
<esa:alarmDefinitions xmlns:esa="http://www.ericsson.com/esa" xmlns="http://www.ericsson.com/esa">
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Bssap</esa:moduleId>
        <esa:errorCode>40</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Bssap</esa:modelDescription>
        <esa:activeDescription>Congestion during the GSM positioning</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GSM positioning traffic overload in the location server occurs.
			</esa:description>
            <esa:alarmingObject>
			  Bssap
			</esa:alarmingObject>
            <esa:raisedBy>
			  Congestion to PPSelector
			</esa:raisedBy>
            <esa:clearedBy>
			  Congestion to PPSelector ceased
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Limit the traffic load between BSCs and the SMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppsas</esa:moduleId>
        <esa:errorCode>401</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppsas</esa:modelDescription>
        <esa:activeDescription>Congestion during the WCDMA positioning</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The WCDMA positioning traffic overload in the location server occurs.
			</esa:description>
            <esa:alarmingObject>
			  ppsas
			</esa:alarmingObject>
            <esa:raisedBy>
			  SAS Internal Congestion
			</esa:raisedBy>
            <esa:clearedBy>
			  SAS Internal Congestion Ceased
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Limit the traffic load between RNCs and the SMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>201</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>Congestion during the LTE positioning</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The LTE positioning traffic overload in the location server occurs.
			</esa:description>
            <esa:alarmingObject>
			  ppesmlc
			</esa:alarmingObject>
            <esa:raisedBy>
			  ESMLC Internal Congestion
			</esa:raisedBy>
            <esa:clearedBy>
			  ESMLC Internal Congestion Ceased
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Limit the traffic load between MMEs and the ESMLC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>206</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>Pre-Congestion during the LTE positioning</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              The location server is reporting a potential overload condition in LTE positioning traffic.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              LTE Position Requests Pre-Congestion
            </esa:raisedBy>
            <esa:clearedBy>
              LTE Position Requests Pre-Congestion Ceased
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Limit the traffic load between MMEs and the ESMLC. If the problem still exists, collect the stack trace of PPESMLC component using gstack. Restart PPESMLC component if it is not working properly.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>227</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>Working thread deadlock during the LTE positioning</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
              At least one working thread has potential deadlock during LTE positioning.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              E-SMLC Working Thread Deadlock
            </esa:raisedBy>
            <esa:clearedBy>
              E-SMLC Working Thread Deadlock Ceased
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Collect the stack trace of PPESMLC component using gstack. Restart PPESMLC component in case it is not working properly.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>2004</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>This alarm is generated when at least one NNAS host is down.</esa:activeDescription>
        <esa:eventType>7</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              This alarm is generated when at least one NNAS host is down.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              NNAS host down
            </esa:raisedBy>
            <esa:clearedBy>
              NNAS host active
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Check if any NNAS host is down.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>2005</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>This alarm is generated when no NNAS host is active, which means service is down.</esa:activeDescription>
        <esa:eventType>7</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              This event is generated when no NNAS host is active, which means service is down.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              NNAS service down
            </esa:raisedBy>
            <esa:clearedBy>
              NNAS service active
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Check if at least one NNAS host is active.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>1242</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if one NEAD is down and one NEAD is up and running.</esa:activeDescription>
        <esa:eventType>7</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              Problems occur when communicating with one NEAD but not all NEADs.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              One NEAD is down and one NEAD is up and running
            </esa:raisedBy>
            <esa:clearedBy>
              All NEADs are restored or all NEADs are down
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Check the connection between the ESMLC and the NEAD.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>1243</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if all NEADs are down.</esa:activeDescription>
        <esa:eventType>7</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              Problems occur when communicating with all NEADs.
            </esa:description>
            <esa:alarmingObject>
              ppesmlc
            </esa:alarmingObject>
            <esa:raisedBy>
              All NEADs are down
            </esa:raisedBy>
            <esa:clearedBy>
              At least one NEAD is up and running
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Check the connection between the ESMLC and the NEAD.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>42</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to network component
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to network component
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Bssap</esa:moduleId>
        <esa:errorCode>44</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Bssap</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Bssap
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPSelector
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPSelector
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Emap</esa:moduleId>
        <esa:errorCode>441</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Emap</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Emap
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPSelector
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPSelector
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
      <esa:moduleId>ppaecid</esa:moduleId>
      <esa:errorCode>442</esa:errorCode>
      <esa:severity>4</esa:severity>
      <esa:modelDescription>ppaecid</esa:modelDescription>
      <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
      <esa:eventType>2</esa:eventType>
      <esa:probableCause>158</esa:probableCause>
     <esa:documentation>
      <esa:description>
        The process AECIDCacheManager64 for GSM is not starting or restarting.
      </esa:description>
      <esa:alarmingObject>
        ppaecid
      </esa:alarmingObject>
      <esa:raisedBy>
        Connection lost to AECIDCacheManager64 for GSM
      </esa:raisedBy>
      <esa:clearedBy>
        Connection active to AECIDCacheManager64 for GSM
      </esa:clearedBy>
      <esa:proposedRepairAction>
        No special action is needed. The PPAECID component makes sure that the process AECIDCacheManager64 for GSM is restarted and the alarm is cleaned automatically . If the alarm is not cleaned after 10 minutes, please restart the PPAECID component manually.
      </esa:proposedRepairAction>
     </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
      <esa:moduleId>ppsas</esa:moduleId>
      <esa:errorCode>443</esa:errorCode>
      <esa:severity>4</esa:severity>
      <esa:modelDescription>ppsas</esa:modelDescription>
      <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
      <esa:eventType>2</esa:eventType>
      <esa:probableCause>158</esa:probableCause>
     <esa:documentation>
      <esa:description>
        The process AECIDCacheManager64 for WCDMA is not starting or restarting.
      </esa:description>
      <esa:alarmingObject>
        ppsas
      </esa:alarmingObject>
      <esa:raisedBy>
        Connection lost to AECIDCacheManager64 for WCDMA
      </esa:raisedBy>
      <esa:clearedBy>
        Connection active to AECIDCacheManager64 for WCDMA
      </esa:clearedBy>
      <esa:proposedRepairAction>
        No special action is needed. The PPSAS component makes sure that the process AECIDCacheManager64 for WCDMA is restarted and the alarm is cleaned automatically . If the alarm is not cleaned after 10 minutes, please restart the PPSAS component manually.
      </esa:proposedRepairAction>
     </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
      <esa:moduleId>pplteaecid</esa:moduleId>
      <esa:errorCode>444</esa:errorCode>
      <esa:severity>4</esa:severity>
      <esa:modelDescription>pplteaecid</esa:modelDescription>
      <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
      <esa:eventType>2</esa:eventType>
      <esa:probableCause>158</esa:probableCause>
     <esa:documentation>
      <esa:description>
        The process AECIDCacheManager64 for LTE is not starting or restarting.
      </esa:description>
      <esa:alarmingObject>
        pplteaecid
      </esa:alarmingObject>
      <esa:raisedBy>
        Connection lost to AECIDCacheManager64 for LTE
      </esa:raisedBy>
      <esa:clearedBy>
        Connection active to AECIDCacheManager64 for LTE
      </esa:clearedBy>
      <esa:proposedRepairAction>
        No special action is needed. The PPLTEAECID component makes sure that the process AECIDCacheManager64 for LTE is restarted and the alarm is cleaned automatically . If the alarm is not cleaned after 10 minutes, please restart the PPLTEAECID component manually.
      </esa:proposedRepairAction>
     </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>45</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPSelector
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPSelector
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>46</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPGPS lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPGPS active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>170</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPSAS
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPSAS
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppsas</esa:moduleId>
        <esa:errorCode>171</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppsas</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppsas
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPGPS lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPGPS active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>202</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPESMLC
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPESMLC
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppesmlc</esa:moduleId>
        <esa:errorCode>203</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppesmlc</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppesmlc
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPGPS
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPGPS
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>47</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The Assistance Data Server is marked as containing invalid data by the MPS server.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A DGPS alarm has arrived, DGPS corrections have been detected faulty, or the data transfer has stopped and validation time for the data has expired.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data from reference network is invalid
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data from reference network is valid again
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data alarm is active, if so, refer to that alarm. Check the connection to the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>48</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Assistance data was not received within the user-defined time interval.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The DGPS receiver is down or no connection to it is active.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data has stopped arriving from reference network
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data has started arriving from reference network
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the host is reachable from the MPS. Also compare ADTimeLimit with the configured time intervals used by the Assistance Data Server when requesting assistance data from the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>49</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The DGPS controller has detected that a problem occurred in the DGPS receiver.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The DGPS receiver has encountered an internal problem.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  DGPS alarm received
			</esa:raisedBy>
            <esa:clearedBy>
			  DGPS receiver is now functioning OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Read information text and then check RXSTATUS Log in the Novatel OEM4 manual.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>50</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to connect to the A-GPS reference network or it does not respond.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The A-GPS reference network is down or is not responding.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data service failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data service active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the A-GPS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>501</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to connect to the A-GPS reference network or it does not respond.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The A-GPS reference network is down or is not responding.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to reference network lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to reference network active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the A-GPS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>114</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with an Assistance Data Provider.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The assistance data provider is unavailable or cannot provide valid assistance data.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data provider failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data provider active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check that the Assistance Data Provider is up and running, and the correct assistance data are provided
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>120</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with an Assistance Data Server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Problems occur when communicating with an Assistance Data Server.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  All ADS are OK
			</esa:raisedBy>
            <esa:clearedBy>
			  ADS is not OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>125</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with all Assistance Data Servers.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  No Assistance Data Server is up.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  ADS service is available
			</esa:raisedBy>
            <esa:clearedBy>
			  ADS service is not available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPUTDOA</esa:moduleId>
        <esa:errorCode>54</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPUTDOA</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPUTDOA
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPSelector
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPSelector
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPUTDOA</esa:moduleId>
        <esa:errorCode>1403</esa:errorCode>
        <esa:severity>1</esa:severity>
        <esa:modelDescription>PPUTDOA</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if the PDE connection on Lbis interface can not be established.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			    The PDE connection on Lbis interface can not be established.
			</esa:description>
            <esa:alarmingObject>
			    PPUTDOA
			</esa:alarmingObject>
            <esa:raisedBy>
			    Connection lost to PDE
			</esa:raisedBy>
            <esa:clearedBy>
			    Connection active to PDE
			</esa:clearedBy>
            <esa:proposedRepairAction>
			    Check the connection on Lbis interface between SMPC and the configured PDE.
			</esa:proposedRepairAction>
        </esa:documentation>
   </esa:alarmSpecification>
   <esa:alarmSpecification active="yes">
        <esa:moduleId>PPUTDOA</esa:moduleId>
        <esa:errorCode>1404</esa:errorCode>
        <esa:severity>1</esa:severity>
        <esa:modelDescription>PPUTDOA</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if the PDE connection on Lb interface can not be established.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			    The PDE connection on Lb interface can not be established.
			</esa:description>
            <esa:alarmingObject>
			    PPUTDOA
			</esa:alarmingObject>
            <esa:raisedBy>
			    Connection lost to PDE
			</esa:raisedBy>
            <esa:clearedBy>
			    Connection active to PDE
			</esa:clearedBy>
            <esa:proposedRepairAction>
			    Check the connection on Lb interface between SMPC and the configured PDE.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>55</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection lost to PPUTDOA
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection active to PPUTDOA
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>12</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The requested PDE does not match any in the database.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>606</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The PDE is wrong or the PDE is not imported.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LAI not handled by any PDE
			</esa:raisedBy>
            <esa:clearedBy>
			  PDE: Import successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check and update the LAI-PDE table.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>101</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  CGI: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  CGI: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>102</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  CGI: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  CGI: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>109</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Cellid: Import failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  Cellid: Import successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>110</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Cellid: Export failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  Cellid: Export successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>204</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Import failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Import successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>205</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Export failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Export successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>206</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Import PMC failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Import PMC successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>207</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Export PMC failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Export PMC successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>208</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Import LPPa failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Import LPPa successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>209</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Export LPPa failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Export LPPa successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>210</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The communication between the E-SMLC and the SLP fails, or the user does not have the write permission to the target directory.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Failed to transfer some OTDOA data files to SLP cluster
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Succeed in transferring all OTDOA data files to SLP cluster
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the communication between the E-SMLC and the SLP or the write permission to the target directory.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
    	<esa:moduleId>ppesmlc</esa:moduleId>
    	<esa:errorCode>211</esa:errorCode>
    	<esa:severity>4</esa:severity>
    	<esa:modelDescription>ppesmlc</esa:modelDescription>
    	<esa:activeDescription>Processing error</esa:activeDescription>
    	<esa:eventType>4</esa:eventType>
    	<esa:probableCause>161</esa:probableCause>
    	<esa:documentation>
    		<esa:description>
    		  The file is corrupt or does not exist.
    		</esa:description>
    		<esa:alarmingObject>
    		  ppesmlc
    		</esa:alarmingObject>
    		<esa:raisedBy>
    		  LTE: Import Global LPPa failed Alarm
    		</esa:raisedBy>
    		<esa:clearedBy>
    		  LTE: Import Global LPPa successful Alarm
    		</esa:clearedBy>
    		<esa:proposedRepairAction>
    		  Check the integrity of the file and the file permissions.
    		</esa:proposedRepairAction>
    	</esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
    	<esa:moduleId>ppesmlc</esa:moduleId>
    	<esa:errorCode>212</esa:errorCode>
    	<esa:severity>4</esa:severity>
    	<esa:modelDescription>ppesmlc</esa:modelDescription>
    	<esa:activeDescription>Processing error</esa:activeDescription>
    	<esa:eventType>4</esa:eventType>
    	<esa:probableCause>161</esa:probableCause>
    	<esa:documentation>
    		<esa:description>
    		  The directory is write protected or deos not exist.
    		</esa:description>
    		<esa:alarmingObject>
    		  ppesmlc
    		</esa:alarmingObject>
    		<esa:raisedBy>
    		  LTE: Export Global LPPa failed Alarm
    		</esa:raisedBy>
    		<esa:clearedBy>
    		  LTE: Export Global LPPa successful Alarm
    		</esa:clearedBy>
    		<esa:proposedRepairAction>
    		  Check the directory path and the directory permissions.
    		</esa:proposedRepairAction>
    	</esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>104</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PDE: Import failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PDE: Import successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>105</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PDE: Export failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PDE: Export successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>60</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>No connection between the SS7 stack and the SS7Manager</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 stack or the SS7Manager component is down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Stack is unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  Stack is available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure that SS7Manager is running and the SS7 stack is up. Otherwise, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>62</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The specified SS7 link is out of service.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 link is disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Link unavailable for UP
			</esa:raisedBy>
            <esa:clearedBy>
			  All links available for UP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the SS7 link is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>98</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The specified SS7 association establishment failed.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 association is disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Association is unavailable for UP
			</esa:raisedBy>
            <esa:clearedBy>
			  All associations available for UP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the SS7 association is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>63</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>SS7 links are not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  All SS7 links are disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  MTP3 network not available
			</esa:raisedBy>
            <esa:clearedBy>
			  MTP3 network available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all SS7 links are connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>64</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The links are deactivated due to an internal SMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One or more plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SS7Manager deactivated links
			</esa:raisedBy>
            <esa:clearedBy>
			  SS7Manager activated links
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all plug-ins are started and active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Bssap</esa:moduleId>
        <esa:errorCode>310</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Bssap</esa:modelDescription>
        <esa:activeDescription>The specified SSN is out of service.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
              The specified SSN is out of service.
			</esa:description>
            <esa:alarmingObject>
			  Bssap
			</esa:alarmingObject>
            <esa:raisedBy>
			  SSN is out of service.
			</esa:raisedBy>
            <esa:clearedBy>
              SSN is in service.
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the connection between the SMPC and the remote node.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>200</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The specified SCTP association establishment failed.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SCTP association is disconnected or goes down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SCTP Association Down
			</esa:raisedBy>
            <esa:clearedBy>
			  All SCTP Association Up
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if SCTP association is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>221</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>SCTP associations are not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  All SCTP associations are disconnected or go down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SCTP Network not available
			</esa:raisedBy>
            <esa:clearedBy>
			  SCTP Network available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if SCTP associations are connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>223</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The SCTP links are down due to an internal SMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One or more plug-ins is down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SCTP deactivated associations
			</esa:raisedBy>
            <esa:clearedBy>
			  SCTP activated associations
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all plug-ins are started and active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>65</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The SSL certificate is about to expire or has already expired.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The certificate is about to expire or has already expired.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  SSL certificate expire warning
			</esa:raisedBy>
            <esa:clearedBy>
			  SSL certificate is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Renew the certificate by contacting the certificate authority that signed the current certificate.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>661</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>662</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM continued unavailable, warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>663</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM continued unavailable, hard limit
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>67</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>Used capacity has passed first warning level, upwards or downwards.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is getting close to the maximum licensed capacity allowed by the license. Otherwise the used capacity is getting close to the maximum licensed capacity set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed lowest level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed lowest level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>68</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>Used capacity has passed second warning level, upwards or downwards.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is getting close to the maximum licensed capacity allowed by the license. Otherwise the used capacity is getting close to the maximum licensed capacity set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed middle level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed middle level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>69</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The used total capacity is more than the maximum licensed capacity.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is at the maximum limit allowed by the license. Otherwise the used capacity is at the maximum limit set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed hard limit upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed hard limit downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>70</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>71</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>72</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>79</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>80</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>81</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>187</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>188</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>189</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>136</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>137</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>138</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>139</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>140</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>141</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>82</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>83</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>84</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>85</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>86</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>87</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>88</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>89</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>90</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>91</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>92</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>93</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>106</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>107</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>108</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>513</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>514</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>515</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>161</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>162</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>163</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>177</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>178</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>179</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>303</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>304</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>305</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>821</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>822</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>823</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>824</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>825</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>826</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>827</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>828</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>829</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>830</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>831</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>832</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>833</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>834</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>835</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>836</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>837</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>838</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>839</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>840</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>841</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>lanmonitor</esa:moduleId>
        <esa:errorCode>94</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>lanmonitor</esa:modelDescription>
        <esa:activeDescription>The specified host is not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>523</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The monitored host is down or a network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  lanmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  LAN down
			</esa:raisedBy>
            <esa:clearedBy>
			  LAN up
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the monitored host and the network.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>95</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Calculating the logical ISP file is impossible.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One or more servers are down.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  ISP: Logical calculation successful
			</esa:raisedBy>
            <esa:clearedBy>
			  ISP: Logical calculation failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Wait until all servers are up again.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Statistics</esa:moduleId>
        <esa:errorCode>97</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>Statistics</esa:modelDescription>
        <esa:activeDescription>Problems which occur when reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file name or path is wrong.
			</esa:description>
            <esa:alarmingObject>
			  Statistics
			</esa:alarmingObject>
            <esa:raisedBy>
			  Statistics file error
			</esa:raisedBy>
            <esa:clearedBy>
			  Statistics file success
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the file exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>116</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The connection to the data store is lost.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is not running or the network is down.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store connection recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store connection failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the network connection and the data store status.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>117</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store is invalidated.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is invalidated or restarted.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store invalidation recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store invalidated
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Disconnect and connect data store.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>118</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store replication fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store replication agent is not running or the replication state is abnormal.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store replication recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store replication failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the data store replication agent status and the replication state.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>119</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store capacity usage has passed warning level.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is getting full.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  The data store capacity usage recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  The data store capacity usage passed warning level
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the TimesTen database size. Remove the unnecessary data from the database, or expand the TimesTen license and hardware to keep all the current data and add new data into the TimesTen database. Check the replication agent status and the replication state.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UTDOAOM</esa:moduleId>
        <esa:errorCode>169</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>UTDOAOM</esa:modelDescription>
        <esa:activeDescription>The TCP port of the UTDOAOM interface is already in use.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The TCP port is already in use.
			</esa:description>
            <esa:alarmingObject>
			  UTDOAOM
			</esa:alarmingObject>
            <esa:raisedBy>
			  TCP port is available for use
			</esa:raisedBy>
            <esa:clearedBy>
			  TCP port is already in use
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Change settings of the program that use the TCP port to free the port, then unload and restart the UTDOAOM component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>152</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the AECID SFTP SiteA active server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) IP Address is null. 2) Network issue. 3) The AECID SFTP server is not active. 4) Error in the configuration of the SFTP.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: Connection to AECID SFTP SiteA active server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: Connection to AECID SFTP SiteA active server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) IP Address is not null. 2) Ensure the network is working normally. 3) Start the AECID SFTP server. 4) Ensure the configuration of the SFTP is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
        <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>172</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the AECID SFTP SiteA standby server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) IP Address is null. 2) Network issue. 3) The AECID SFTP server is not active. 4) Error in the configuration of the SFTP.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: Connection to AECID SFTP SiteA standby server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: Connection to AECID SFTP SiteA standby server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) IP Address is not null. 2) Ensure the network is working normally. 3) Start the AECID SFTP server. 4) Ensure the configuration of the SFTP is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
        <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>173</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the AECID SFTP SiteB active server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) IP Address is null. 2) Network issue. 3) The AECID SFTP server is not active. 4) Error in the configuration of the SFTP.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: Connection to AECID SFTP SiteB active server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: Connection to AECID SFTP SiteB active server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) IP Address is not null. 2) Ensure the network is working normally. 3) Start the AECID SFTP server. 4) Ensure the configuration of the SFTP is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
        <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>174</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the AECID SFTP SiteB standby server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) IP Address is null. 2) Network issue. 3) The AECID SFTP server is not active. 4) Error in the configuration of the SFTP.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: Connection to AECID SFTP SiteB standby server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: Connection to AECID SFTP SiteB standby server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) IP Address is not null. 2) Ensure the network is working normally. 3) Start the AECID SFTP server. 4) Ensure the configuration of the SFTP is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>154</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The system ID for GSM, WCDMA, or LTE is not set.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>606</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The system ID for GSM, WCDMA, or LTE is not set.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: System ID is not set
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: System ID is set
			</esa:clearedBy>
            <esa:proposedRepairAction>
			 Set the system ID for GSM, WCDMA, or LTE. System ID for GSM should be set if AECID feature in GSM control plane is activated. System ID For WCDMA should be set if AECID feature in WCDMA control plane is activated. System ID For LTE should be set if AECID feature in LTE control plane is activated.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>155</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The  AECID SFTP server address is not set.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>606</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The AECID SFTP server address is not set.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: AECID SFTP server address is not set
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: AECID SFTP server address is set
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Set AECID SFTP server address.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppaecid</esa:moduleId>
        <esa:errorCode>56</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppaecid</esa:modelDescription>
        <esa:activeDescription>The AECID shape data file is corrupted or the size of the file is too large.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The AECID shape data file is corrupted or the size of the file is too large.
			</esa:description>
            <esa:alarmingObject>
			  ppaecid
			</esa:alarmingObject>
            <esa:raisedBy>
			  Import AECID shape file failed
			</esa:raisedBy>
            <esa:clearedBy>
              Import AECID shape file successful
            </esa:clearedBy>			
            <esa:proposedRepairAction>
			  Check the AECID shape file that cause the problem to make sure the format of the file is correct. If the shape file is too large to load, some actions can be taken to decrease the size of shape file, such as changing the clustering schema, enabling CCL function and so on.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>pplteaecid</esa:moduleId>
        <esa:errorCode>56</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>pplteaecid</esa:modelDescription>
        <esa:activeDescription>The AECID shape data file is corrupted or the size of the file is too large.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
              The AECID shape data file is corrupted or the size of the file is too large.
            </esa:description>
            <esa:alarmingObject>
              pplteaecid
            </esa:alarmingObject>
            <esa:raisedBy>
              Import AECID shape file failed
            </esa:raisedBy>
            <esa:clearedBy>
              Import AECID shape file successful
            </esa:clearedBy>            
            <esa:proposedRepairAction>
              Check the AECID shape file that cause the problem to make sure the format of the file is correct. If the shape file is too large to load, some actions can be taken to decrease the size of shape file, such as changing the clustering schema, enabling CCL function and so on.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppsas</esa:moduleId>
        <esa:errorCode>56</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppsas</esa:modelDescription>
        <esa:activeDescription>The AECID shape data file is corrupted or the size of the file is too large.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The AECID shape data file is corrupted or the size of the file is too large.
			</esa:description>
            <esa:alarmingObject>
			  ppsas
			</esa:alarmingObject>
            <esa:raisedBy>
			  Import AECID shape file failed
			</esa:raisedBy>
            <esa:clearedBy>
              Import AECID shape file successful
            </esa:clearedBy>			
            <esa:proposedRepairAction>
			  Check the AECID shape file that cause the problem to make sure the format of the file is correct. If the shape file is too large to load, some actions can be taken to decrease the size of shape file, such as changing the clustering schema, enabling CCL function and so on.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1196</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  GSM Global Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  GSM Global Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1197</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  GSM Global Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  GSM Global Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1198</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  WCDMA Global Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  WCDMA Global Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1199</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  WCDMA Global Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  WCDMA Global Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1200</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  BSC Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  BSC Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1201</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  BSC Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  BSC Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1202</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  RNC Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  RNC Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1203</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  RNC Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  RNC Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1204</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CGI Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CGI Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1205</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CGI Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CGI Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1206</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CellId Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CellId Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1207</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CellId Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CellId Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1213</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>66</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The NTP server configuration file is incorrect.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  NTP Monitor: NTP daemon cannot run correctly Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  NTP Monitor: NTP daemon runs correctly Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if NTP configuration file is correct.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1214</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>66</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The NTP server is unreachable, and it might be down.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  NTP Monitor: NTP client cannot synchronize with NTP server correctly Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  NTP Monitor: NTP client synchronizes with NTP server correctly Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the NTP service on the server correctly runs and the network is connected.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1215</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>66</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The script, which is used to synchronize time with the NTP server on the NTP client, incorrectly runs.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  NTP Monitor: The offset between local server and NTP server has reached the level Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  NTP Monitor: The offset between local server and NTP server is under the level Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the script, which is used to synchronize time with the NTP server on the NTP client, correctly runs.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1216</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>66</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  Neither /etc/inet/ntp.conf nor /etc/rc2.d/S99ntpdate is configured, or both of them are configured.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  NTP Monitor: The NTP service is not configured on this server Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  NTP Monitor: The NTP service is configured on this server Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if this server is configured correctly as NTP client or NTP server with the appropriate configuration file.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PPSelector</esa:moduleId>
		<esa:errorCode>1218</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PPSelector</esa:modelDescription>
		<esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
			<esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
			<esa:raisedBy>
			  Connection lost to PositioningRecord
			</esa:raisedBy>
			<esa:clearedBy>
			  Connection active to PositioningRecord
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>ppsas</esa:moduleId>
		<esa:errorCode>1219</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>ppsas</esa:modelDescription>
		<esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
			<esa:alarmingObject>
			  ppsas
			</esa:alarmingObject>
			<esa:raisedBy>
			  Connection lost to PositioningRecord
			</esa:raisedBy>
			<esa:clearedBy>
			  Connection active to PositioningRecord
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>ppesmlc</esa:moduleId>
		<esa:errorCode>1236</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>ppesmlc</esa:modelDescription>
		<esa:activeDescription>The communication between SMPC internal software components fails.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
			<esa:alarmingObject>
			  ppesmlc 
			</esa:alarmingObject>
			<esa:raisedBy>
			  Connection lost to PositioningRecord
			</esa:raisedBy>
			<esa:clearedBy>
			  Connection active to PositioningRecord
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PositioningRecord</esa:moduleId>
		<esa:errorCode>1220</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PositioningRecord</esa:modelDescription>
		<esa:activeDescription>Problem in creating a positioning record file.</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file path or permissions are wrong.
			</esa:description>
			<esa:alarmingObject>
			  PositioningRecord
			</esa:alarmingObject>
			<esa:raisedBy>
			  Problem while creating positioning record file
			</esa:raisedBy>
			<esa:clearedBy>
			  Succeeded while creating positioning record file
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PositioningRecord</esa:moduleId>
		<esa:errorCode>1221</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PositioningRecord</esa:modelDescription>
		<esa:activeDescription>Problem in creating a temporary file.</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file path or permissions are wrong.
			</esa:description>
			<esa:alarmingObject>
			  PositioningRecord
			</esa:alarmingObject>
			<esa:raisedBy>
			  Problem while creating temporary positioning record file
			</esa:raisedBy>
			<esa:clearedBy>
			  Succeeded in creating temporary positioning record file
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PositioningRecord</esa:moduleId>
		<esa:errorCode>1222</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PositioningRecord</esa:modelDescription>
		<esa:activeDescription>The temporary positioning record file may be corrupted and renamed.</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The PositioningRecord component goes down when it is writing to the file.
			</esa:description>
			<esa:alarmingObject>
			  PositioningRecord
			</esa:alarmingObject>
			<esa:raisedBy>
			  The temporary positioning record files may be corrupted and will be renamed
			</esa:raisedBy>
			<esa:proposedRepairAction>
			  Restart the PositioningRecord component.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PositioningRecord</esa:moduleId>
		<esa:errorCode>1223</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PositioningRecord</esa:modelDescription>
		<esa:activeDescription>The used disk size is more than the configured warning level.</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>151</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The used disk size is getting close to the value set by the parameter TotalSize.
			</esa:description>
			<esa:alarmingObject>
			  PositioningRecord
			</esa:alarmingObject>
			<esa:raisedBy>
			  Used disk size passed warning level upwards
			</esa:raisedBy>
			<esa:clearedBy>
			  Used disk size passed warning level downwards
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Remove the positioning record file or set the TotalSize parameter.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1224</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Fixed XY Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Fixed XY Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1225</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Fixed XY Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Fixed XY Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1226</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Global Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Global Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1227</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Global Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Global Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>			
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1228</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  MME Pool Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  MME Pool Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1229</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  MME Pool Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  MME Pool Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1230</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CID Positioning Control Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CID Positioning Control Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1231</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  CID Positioning Control Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  CID Positioning Control Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1232</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Dual Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Dual Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1233</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  LTE Dual Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  LTE Dual Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1234</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  MME Pool Information Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  MME Pool Information Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1235</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  MME Pool Information Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  MME Pool Information Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1237</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  OSS Config Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  OSS Config Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1238</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  OSS Config Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  OSS Config Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1239</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  RNC Config Data: Import failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  RNC Config Data: Import successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>OM</esa:moduleId>
		<esa:errorCode>1240</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>OM</esa:modelDescription>
		<esa:activeDescription>Processing error</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>161</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
			<esa:alarmingObject>
			  OM
			</esa:alarmingObject>
			<esa:raisedBy>
			  RNC Config Data: Export failed Alarm
			</esa:raisedBy>
			<esa:clearedBy>
			  RNC Config Data: Export successful Alarm
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>1250</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Import RAN Position Method Control Config failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Import RAN Position Method Control Config successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>1251</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Export RAN Position Method Control Config failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Export RAN Position Method Control Config successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>1252</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  WCDMA: Import RAN Position Method Control Config failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  WCDMA: Import RAN Position Method Control Config successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>1253</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  WCDMA: Export RAN Position Method Control Config failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  WCDMA: Export RAN Position Method Control Config successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
		<esa:errorCode>402</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
		<esa:activeDescription>The Assistance Data Server is marked as containing invalid data by the MPS server.</esa:activeDescription>
		<esa:eventType>4</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  A GLONASS alarm has arrived, GLONASS corrections have been detected faulty, or the data transfer has stopped and validation time for the data has expired.
			</esa:description>
			<esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
			<esa:raisedBy>
			  Assistance data from reference network is invalid
			</esa:raisedBy>
			<esa:clearedBy>
			  Assistance data from reference network is valid again
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if Assistance Data alarm is active, if so, refer to that alarm. Check the connection to the Assistance Data Server.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
		<esa:errorCode>403</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
		<esa:activeDescription>Assistance data was not received within the user-defined time interval.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The GLONASS receiver is down or no connection to it is active.
			</esa:description>
			<esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
			<esa:raisedBy>
			  Assistance data has stopped arriving from reference network
			</esa:raisedBy>
			<esa:clearedBy>
			  Assistance data has started arriving from reference network
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the host is reachable from the MPS. Also compare ADTimeLimit with the configured time intervals used by Assistance Data Server when requesting assistance data from the Assistance Data Server.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>	
	<esa:alarmSpecification active="yes">
		<esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
		<esa:errorCode>405</esa:errorCode>
		<esa:severity>3</esa:severity>
		<esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
		<esa:activeDescription>The plug-in fails to connect to the GLONASS reference network or it does not respond.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The GLONASS reference network is down or is not responding.
			</esa:description>
			<esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
			<esa:raisedBy>
			  Assistance data service failure
			</esa:raisedBy>
			<esa:clearedBy>
			  Assistance data service active
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the GLONASS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
		<esa:errorCode>406</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
		<esa:activeDescription>Problems occur when communicating with an assistance data provider.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The assistance data provider is unavailable or cannot provide valid assistance data.
			</esa:description>
			<esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
			<esa:raisedBy>
			  Assistance data provider failure
			</esa:raisedBy>
			<esa:clearedBy>
			  Assistance data provider active
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check if the assistance data provider is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>PPLTEEvent</esa:moduleId>
		<esa:errorCode>1300</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PPLTEEvent</esa:modelDescription>
		<esa:activeDescription>Problems occur when pplteevent of SMPC sends UID mapping messages to GMPC.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>159</esa:probableCause>
		<esa:documentation>
			<esa:description>
			The alarm is generated when the UidMapping network connection to the GMPC Server is lost.
            </esa:description>
			<esa:alarmingObject>
			  PPLTEEvent
			</esa:alarmingObject>
			<esa:raisedBy>
			  UID mapping messages: Connection lost to GMPC
            </esa:raisedBy>
			<esa:clearedBy>
			  UID mapping messages: Connection active to GMPC
            </esa:clearedBy>
			<esa:proposedRepairAction>
			  Make sure the RANEventLocaiton plugin of GMPC is active, and the network access to GMPC is good, and the configuration of GMPC and SMPC matches.
                        </esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
		<esa:moduleId>PPLTEEvent</esa:moduleId>
		<esa:errorCode>1301</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>PPLTEEvent</esa:modelDescription>
		<esa:activeDescription>Problems occur when SMPC sends location update messages to GMPC.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>160</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The alarm is generated when the LocPush network connection to GMPC server is lost.
			</esa:description>
			<esa:alarmingObject>
			  PPLTEEvent
			</esa:alarmingObject>
			<esa:raisedBy>
			  Location update messages: Connection lost to GMPC
            </esa:raisedBy>
			<esa:clearedBy>
			  Location update messages: Connection active to GMPC
            </esa:clearedBy>
			<esa:proposedRepairAction>
			  Make sure the RANEventLocaiton plugin of GMPC is active, and the network access to GMPC is good, and the configuration of GMPC and SMPC matches.
                        </esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
        <esa:alarmSpecification active="yes">
                <esa:moduleId>PPRNCEvent</esa:moduleId>
                <esa:errorCode>1309</esa:errorCode>
                <esa:severity>4</esa:severity>
                <esa:modelDescription>PPRNCEvent</esa:modelDescription>
                <esa:activeDescription>Problems occur when SMPC sends location update messages to GMPC.</esa:activeDescription>
                <esa:eventType>2</esa:eventType>
                <esa:probableCause>160</esa:probableCause>
                <esa:documentation>
                        <esa:description>
                          The alarm is generated when the LocPush network connection to GMPC server is lost.
                        </esa:description>
                        <esa:alarmingObject>
                          PPRNCEvent
                        </esa:alarmingObject>
                        <esa:raisedBy>
                          Location update messages: Connection lost to GMPC
                        </esa:raisedBy>
                        <esa:clearedBy>
                          Location update messages: Connection active to GMPC
                        </esa:clearedBy>
                        <esa:proposedRepairAction>
                          Make sure the RANEventLocaiton plugin of GMPC is active, and the network access to GMPC is good, and the configuration of GMPC and SMPC matches.
                        </esa:proposedRepairAction>
                </esa:documentation>
     </esa:alarmSpecification>
     <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRNCEvent</esa:moduleId>
        <esa:errorCode>1410</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRNCEvent</esa:modelDescription>
        <esa:activeDescription>The connection between pprncevent of SMPC and FTP/SFTP server of RNC is down.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>368</esa:probableCause>
        <esa:documentation>
            <esa:description>
              PPRNCEvent fails to connect to FTP/SFTP server.
            </esa:description>
            <esa:alarmingObject>
              PPRNCEvent
            </esa:alarmingObject>
            <esa:raisedBy>
              PPRNCEvent: Fail to connect to FTP/SFTP Service
            </esa:raisedBy>
            <esa:clearedBy>
              PPRNCEvent: Connect to FTP/SFTP Service successfully
            </esa:clearedBy>            
            <esa:proposedRepairAction>
              Make sure the PPRNCEvent plugin of SMPC is active, and the network access to FTP/SFTP is good.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRNCEvent</esa:moduleId>
        <esa:errorCode>1411</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPRNCEvent</esa:modelDescription>
        <esa:activeDescription>PPRNCEvent fails to decode the GPEH file.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>368</esa:probableCause>
        <esa:documentation>
            <esa:description>
              PRRNCEvent fails to decode the GPEH file
            </esa:description>
            <esa:alarmingObject>
              PPRNCEvent
            </esa:alarmingObject>
            <esa:raisedBy>
              PPRNCEvent: Fail to decode the GPEH file
            </esa:raisedBy>
            <esa:clearedBy>
              PPRNCEvent: Decode the GPEH file successfully
            </esa:clearedBy>            
            <esa:proposedRepairAction>
              Make sure the format of GPEH file is right.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRNCEvent</esa:moduleId>
        <esa:errorCode>1412</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRNCEvent</esa:modelDescription>
        <esa:activeDescription>PPRNCEvent fails to receive the GPEH file in certain period.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>368</esa:probableCause>
        <esa:documentation>
            <esa:description>
              PPRNCEvent fails to receive the GPEH file in certain period.
            </esa:description>
            <esa:alarmingObject>
              PPRNCEvent
            </esa:alarmingObject>
            <esa:raisedBy>
              PPRNCEvent: Fail to receive the GPEH file in certain period
            </esa:raisedBy>
            <esa:clearedBy>
              PPRNCEvent: Success to receive the GPEH file in certain period
            </esa:clearedBy>            
            <esa:proposedRepairAction>
             Check the configuration of RNC GPEH file.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRNCEvent</esa:moduleId>
        <esa:errorCode>1413</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRNCEvent</esa:modelDescription>
        <esa:activeDescription>There is no Aecid license.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>368</esa:probableCause>
        <esa:documentation>
            <esa:description>
              There is no Aecid license.
            </esa:description>
            <esa:alarmingObject>
              PPRNCEvent
            </esa:alarmingObject>
            <esa:raisedBy>
              PPRNCEvent: There is no Aecid licence
            </esa:raisedBy>
            <esa:clearedBy>
              PPRNCEvent: There is an Aecid licence
            </esa:clearedBy>            
            <esa:proposedRepairAction>
              Please install the Aecid license.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1302</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1303</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1304</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1305</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>162</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, first warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1306</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>162</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license expiring, second warning - Cease
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>1307</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>162</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A time limited license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new time limited license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
		<esa:moduleId>PPLTEEvent</esa:moduleId>
		<esa:errorCode>1308</esa:errorCode>
		<esa:severity>5</esa:severity>
		<esa:modelDescription>PPLTEEvent</esa:modelDescription>
		<esa:activeDescription>Problems occur when pplteevent of SMPC receives CTR event.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>163</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The alarm is generated when none of the XML files whose version matches the version in CTR Event Header.
			</esa:description>
			<esa:alarmingObject>
			  PPLTEEvent
			</esa:alarmingObject>
			<esa:raisedBy>
			  SMPC receive CTR event:CTR Header Event version does not match with any XML files
			</esa:raisedBy>
			<esa:clearedBy>
			 SMPC receive CTR event:CTR Header Event version is good
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  To add the corresponding version XML files into the directory of parameter “CTR_EventConfigPath” of plugin “PPLTEEvent”.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>611</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The communication with the Access Key server is down.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Access Key server is not started.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Connect to access key server failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Connect to access key server successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Access Key server is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPSelector</esa:moduleId>
        <esa:errorCode>611</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPSelector</esa:modelDescription>
        <esa:activeDescription>The communication with the Access Key server is down.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Access Key server is not started.
			</esa:description>
            <esa:alarmingObject>
			  PPSelector
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Connect to access key server failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Connect to access key server successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Access Key server is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>612</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>At least one of the installed Access Key is expired or about to expire in fourteen days.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Access Key is expired or about to expire in fourteen days.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Access key is expired or about to expire Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Access key is not expired or about to expire Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Delete expired Access Key or request and install new Access Key.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>  	
</esa:alarmDefinitions>
"
}]