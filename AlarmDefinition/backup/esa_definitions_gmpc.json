[{
	"flags": 0,
	"key": "cm/values/[VERSION]-[NODE]-[CLUSTER]/datastorages/esaconfig/gmpc",
	"value": "<?xml version="1.0" encoding="UTF-8"?>
<esa:alarmDefinitions xmlns:esa="http://www.ericsson.com/esa" xmlns="http://www.ericsson.com/esa">
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>69</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The Assistance Data Server is marked as containing invalid data by the MPS server.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A DGPS alarm has arrived, DGPS corrections have been detected faulty, or the data transfer has stopped and validation time for the data has expired.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data from reference network is invalid
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data from reference network is valid again
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if Assistance Data alarm is active, if so, refer to that alarm. Check the connection to the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>70</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Assistance data was not received within the user-defined time interval.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The DGPS receiver is down or no connection to it is active.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data has stopped arriving from reference network
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data has started arriving from reference network
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the host is reachable from the MPS. Also compare ADTimeLimit with the configured time intervals used by Assistance Data Server when requesting assistance data from the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>71</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The DGPS controller has detected that a problem occurred in the DGPS receiver.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The DGPS receiver has encountered an internal problem.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  DGPS alarm received
			</esa:raisedBy>
            <esa:clearedBy>
			  DGPS receiver is now functioning OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Read information text and then check RXSTATUS Log in the Novatel OEM4 manual.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>72</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to connect to the A-GPS reference network or it does not respond.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The A-GPS reference network is down or is not responding.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data service failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data service active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the A-GPS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>373</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to connect to the A-GPS reference network or it does not respond.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The A-GPS reference network is down or is not responding.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to reference network lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to reference network active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the A-GPS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>283</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with an assistance data provider.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The assistance data provider is unavailable or cannot provide valid assistance data.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data provider failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data provider active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the assistance data provider is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>284</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with an assistance data server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Problems occur when communicating with an assistance data server.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  All ADS are OK
			</esa:raisedBy>
            <esa:clearedBy>
			  ADS is not OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the assistance data server is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AssistanceDataHandler</esa:moduleId>
        <esa:errorCode>285</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>AssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with all assistance data servers.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  No assistance data server is up.
			</esa:description>
            <esa:alarmingObject>
			  AssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  ADS service is available
			</esa:raisedBy>
            <esa:clearedBy>
			  ADS service is not available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the assistance data server is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>73</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPRouter lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPRouter active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>74</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to UPEngine active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to UPEngine lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>80</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to AECIDEngine active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to AECIDEngine lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>75</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to NetworkStorage lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to NetworkStorage active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>76</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>77</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to UPEngine is restored
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to UPEngine is lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>78</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>79</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>81</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPGPS lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPGPS active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>82</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to UPEngine lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to UPEngine active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>83</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Assistance Data Handler lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Assistance Data Handler active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ppgps</esa:moduleId>
        <esa:errorCode>92</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ppgps</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  ppgps
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to GNSS Assistance Data Handler lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to GNSS Assistance Data Handler active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>84</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>85</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The GMPC fails to deliver the push message to the PPG.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The configuration for the PPG is faulty or the PPG is unavailable.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPG lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPG active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the configuration for the specific PPG is correct.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>86</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The SET Interface is closed due to internal GMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Some of the plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  SET Interface is closed
			</esa:raisedBy>
            <esa:clearedBy>
			  SET Interface is open
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the plug-ins. If a plug-in is down, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>87</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  SET: Import failed
			</esa:raisedBy>
            <esa:clearedBy>
			  SET: Import successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>88</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  SET: Export failed
			</esa:raisedBy>
            <esa:clearedBy>
			  SET: Export successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>89</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PLMN: Import failed
			</esa:raisedBy>
            <esa:clearedBy>
			  PLMN: Import successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>90</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PLMN: Export failed
			</esa:raisedBy>
            <esa:clearedBy>
			  PLMN: Export successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Billing</esa:moduleId>
        <esa:errorCode>91</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Billing</esa:modelDescription>
        <esa:activeDescription>File error</esa:activeDescription>
        <esa:eventType>8</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file path or permissions are wrong.
			</esa:description>
            <esa:alarmingObject>
			  Billing
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problem while creating billing file
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded while creating billing file
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Billing</esa:moduleId>
        <esa:errorCode>93</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Billing</esa:modelDescription>
        <esa:activeDescription>The temporary billing file may be corrupted and renamed.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Billing component goes down when it is writing to the file.
			</esa:description>
            <esa:alarmingObject>
			  Billing
			</esa:alarmingObject>
            <esa:raisedBy>
			  The temporary billing files may be corrupted and will be renamed
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Restart the Billing component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Billing</esa:moduleId>
        <esa:errorCode>95</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Billing</esa:modelDescription>
        <esa:activeDescription>Problem in creating a temporary file.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file path or permissions are wrong.
			</esa:description>
            <esa:alarmingObject>
			  Billing
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problem while creating a temporary file
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded in creating a temporary file
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>96</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MPP</esa:moduleId>
        <esa:errorCode>97</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MPP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MPP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>651</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Authority lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Authority restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>351</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>98</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  CGI: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  CGI: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>99</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  CGI: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  CGI: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>100</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  SAI: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  SAI: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>101</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  SAI: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  SAI: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>338</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireline: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireline: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>339</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireline: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireline: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	
	<esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>607</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PPSAP Wireline Routing: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireline Routing: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>608</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireline Routing: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireline Routing: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>340</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireless: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireless: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>341</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireless: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireless: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>605</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireless Range: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireless Range: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>606</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Wireless Range: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Wireless Range: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>601</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ID Mapping: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ID Mapping: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>602</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ID Mapping: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ID Mapping: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>603</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Address Mapping: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Address Mapping: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>604</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Address Mapping: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Address Mapping: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	
	<esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>609</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ICBS Mapping: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ICBS Mapping: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>610</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ICBS Mapping: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ICBS Mapping: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
        </esa:alarmSpecification>
        
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>614</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ProviderInfo Mapping: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ProviderInfo Mapping: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>615</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP ProviderInfo Mapping: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP ProviderInfo Mapping: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
         </esa:documentation>
    </esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>611</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Test UE List: Import failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Test UE List: Import successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>612</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  PSAP Test UE List: Export failed alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  PSAP Test UE List: Export successful alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>391</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file is corrupt or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Import failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Import successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the integrity of the file and the file permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>392</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Processing error</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The directory is write protected or does not exist.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  LTE: Export failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  LTE: Export successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the directory path and the directory permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>61</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The GMPC fails to connect to the external client.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Key authentication failure. 2) Network problem. 3) The SFTP service is not started in the external client.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to external client failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Geometry shape cache is cleared
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Deploy the key in correct way. 2) Ensure the network is working normally. 3) Start the SFTP service in the external client.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>62</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Empty configuration file or wrong client address format</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Empty configuration file or wrong client address format
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Empty configuration file or Client Address format is wrong
			</esa:raisedBy>
            <esa:clearedBy>
			  Client address format is correct
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Ensure the configuration of the client address is correct
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MPP</esa:moduleId>
        <esa:errorCode>102</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MPP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MPP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Authority failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Authority restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>103</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Authority is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Authority is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>LocationDataStream</esa:moduleId>
        <esa:errorCode>424</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>LocationDataStream</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  LocationDataStream
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Authority is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Authority is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>104</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>No connection between the SS7 stack and the SS7Manager</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 stack or the SS7Manager component is down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Stack is unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  Stack is available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure that SS7Manager is running and the SS7 stack is up. Otherwise, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>106</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>No connection between the SS7 stack and the Map</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 stack is not running.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  SS7 stack rejected message
			</esa:raisedBy>
            <esa:clearedBy>
			  SS7 stack accepted message
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure the SS7 stack is running. If not, start it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>107</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The specified SS7 link is out of service.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 link is disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Link unavailable for UP
			</esa:raisedBy>
            <esa:clearedBy>
			  All links available for UP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the SS7 link is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>205</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The specified SS7 association establishment fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SS7 association is disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  Association is unavailable for UP
			</esa:raisedBy>
            <esa:clearedBy>
			  All associations available for UP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the SS7 association is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>108</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The SS7 links and associations are not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  All SS7 links and associations are disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SS7 network not available
			</esa:raisedBy>
            <esa:clearedBy>
			  SS7 network available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all SS7 links and associations are connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ss7manager</esa:moduleId>
        <esa:errorCode>109</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ss7manager</esa:modelDescription>
        <esa:activeDescription>The links are deactivated due to an internal GMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One or more plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  ss7manager
			</esa:alarmingObject>
            <esa:raisedBy>
			  SS7Manager deactivated links
			</esa:raisedBy>
            <esa:clearedBy>
			  SS7Manager activated links
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all plug-ins are started and active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PacketLocationFeeder</esa:moduleId>
        <esa:errorCode>461</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PacketLocationFeeder</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if any Huawei MSS LBS UDP packet is from an unlawful IP address.</esa:activeDescription>
        <esa:eventType>10</esa:eventType>
        <esa:probableCause>600</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A Huawei MSS LBS UDP packet is not from an allowed IP address.
			</esa:description>
            <esa:alarmingObject>
			  PacketLocationFeeder
			</esa:alarmingObject>
            <esa:raisedBy>
			  Huawei MSS LBS UDP packet is not from allowed IP address alarm
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Add this IP in Huawei MSS LBS white list.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PacketLocationFeeder</esa:moduleId>
        <esa:errorCode>462</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PacketLocationFeeder</esa:modelDescription>
        <esa:activeDescription>This alarm is generated if any NSN MSS UDP packet is from an unlawful IP address.</esa:activeDescription>
        <esa:eventType>10</esa:eventType>
        <esa:probableCause>600</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  An NSN MSS UDP packet is not from an allowed IP address.
			</esa:description>
            <esa:alarmingObject>
			  PacketLocationFeeder
			</esa:alarmingObject>
            <esa:raisedBy>
			  NSN MSS UDP packet is not from allowed IP address alarm
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Add this IP in NSN MSS white list.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>110</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>111</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  LCS message could not be sent
			</esa:raisedBy>
            <esa:clearedBy>
			  LCS message successfully sent
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPE112</esa:moduleId>
        <esa:errorCode>212</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPE112</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPE112
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>213</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  LCS message successfully sent to PPE112
			</esa:raisedBy>
            <esa:clearedBy>
			  LCS message could not be sent to PPE112
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPATI</esa:moduleId>
        <esa:errorCode>112</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPATI</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPATI
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>113</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  SMS message could not be sent
			</esa:raisedBy>
            <esa:clearedBy>
			  SMS message successfully sent
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>114</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>115</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to CWSL lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to CWSL active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>352</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Map lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Map restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Map</esa:moduleId>
        <esa:errorCode>353</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Map</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Map
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>208</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>209</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to CWSL active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to CWSL lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>329</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to CWSL active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to CWSL lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>280</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Registration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Registration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>281</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Unregistration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Unregistration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>CWSL</esa:moduleId>
        <esa:errorCode>282</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>CWSL</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  CWSL
			</esa:alarmingObject>
            <esa:raisedBy>
			  Notification register is restored for consumer
			</esa:raisedBy>
            <esa:clearedBy>
			  Notification register is expired for consumer
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AnyPhone</esa:moduleId>
        <esa:errorCode>303</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AnyPhone</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  AnyPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Registration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Registration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AnyPhone</esa:moduleId>
        <esa:errorCode>304</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AnyPhone</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  AnyPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Unregistration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Unregistration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>LocationDataStream</esa:moduleId>
        <esa:errorCode>421</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>LocationDataStream</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  LocationDataStream
			</esa:alarmingObject>
            <esa:raisedBy>
			  Registration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Registration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>LocationDataStream</esa:moduleId>
        <esa:errorCode>422</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>LocationDataStream</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component, or a DB network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  LocationDataStream
			</esa:alarmingObject>
            <esa:raisedBy>
			  Unregistration to CWSL successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Unregistration to CWSL failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active. Furthermore ensure if the DB status is normal for the internal registration operation.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>	
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>453</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>No connection between the Diameter stack and the Diameter component</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Diameter stack or the Diameter component is down.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Stack is unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  Stack is available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure that Diameter Component is running and the Diameter stack is up. Otherwise, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>454</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>No connection between the Diameter stack and the Diameter component</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Diameter stack is not running.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Diameter stack rejected message
			</esa:raisedBy>
            <esa:clearedBy>
			  Diameter stack accepted message
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure the Diameter stack is running. If not, start it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>455</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>The specified Diameter connection establishment fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Diameter connection is disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Diameter connection is unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  All Diameter connections are available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Diameter connection is connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>456</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>The Diameter connection is not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  All Diameter connections are disconnected or deactivated.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Diameter network unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  Diameter network available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all Diameter connections are connected and in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>457</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>The links are deactivated due to an internal GMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One or more plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Diameter deactivated connections
			</esa:raisedBy>
            <esa:clearedBy>
			  Diameter activated connections
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if all plug-ins are started and active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>EBMServer</esa:moduleId>
        <esa:errorCode>470</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>EBMServer</esa:modelDescription>
        <esa:activeDescription>The GMPC receives an EBM record with an invalid record type from a SGSN-MME connection.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>23</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  This connection is not from the SGSN-MME EBM stream port.
			</esa:description>
            <esa:alarmingObject>
			  EBMServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Invalid EBM record
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Disconnect from the SGSN-MME.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
        <esa:moduleId>RANEventLocation</esa:moduleId>
        <esa:errorCode>500</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RANEventLocation</esa:modelDescription>
        <esa:activeDescription>The GMPC receives an CTUM record with an invalid record type from a SGSN-MME connection.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>23</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SGSN-MME sends a wrong CTUM record.
			</esa:description>
            <esa:alarmingObject>
			  RANEventLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Failed to parse CTUM record
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Disconnect from the SGSN-MME.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	    <esa:alarmSpecification active="yes">
        <esa:moduleId>EBMServer</esa:moduleId>
        <esa:errorCode>471</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>EBMServer</esa:modelDescription>
        <esa:activeDescription>one or more tcp connection with OSS are broken.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  connection are shutdown due to network impact or OSS behavior.
			</esa:description>
            <esa:alarmingObject>
			  EBMServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  OSS-RC EBM forward connection broken
			</esa:raisedBy>
            <esa:clearedBy>
			  OSS-RC EBM forward connection recovery
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  check network environment and OSS-RC status.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
        <esa:moduleId>RANEventLocation</esa:moduleId>
        <esa:errorCode>501</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RANEventLocation</esa:modelDescription>
        <esa:activeDescription>One or more TCP connections between the GMPC and the OSS-RC are broken.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The network is unstable or the OSS-RC shuts down the connection with the GMPC for some unknown causes.
			</esa:description>
            <esa:alarmingObject>
			  RANEventLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  OSS-RC CTUM forward connection broken
			</esa:raisedBy>
            <esa:clearedBy>
			  OSS-RC CTUM forward connection recovery
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  check network environment and OSS-RC status.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>458</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Diameter lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Diameter active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Diameter</esa:moduleId>
        <esa:errorCode>459</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Diameter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Diameter
			</esa:alarmingObject>
            <esa:raisedBy>
			  SLh message could not be sent
			</esa:raisedBy>
            <esa:clearedBy>
			  SLh message successfully sent
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>117</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The GMPC fails to send an HTTP request message to a remote GMPC.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>25</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The address to the remote GMPC may be wrong or the remote GMPC is not in service.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Failed to send message to visited GMPC
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded to send message to visited GMPC
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check and, if necessary, add or update the address to the remote GMPC. Check if the remote GMPC is in service.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>118</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPRouter is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPRouter is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>119</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>120</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Failed to send message to MLP
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded to send message to MLP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>121</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to HTTPServer is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to HTTPServer is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>146</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>GMPC fails to communicat with one of the Emergency Push Destinations.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  One of the Emergency Push Destinations is wrong.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  GMPC communication with one Emergency Push Destination failed
			</esa:raisedBy>
            <esa:clearedBy>
			  GMPC communication with all Emergency Push Destinations successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Correct at least all Primary Push Destinations.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>147</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>GMPC fails to communicates with all of the Emergency Push Destinations.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  All of the Emergency Push Destinations are wrong.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  GMPC communication with all Emergency Push Destinations failed
			</esa:raisedBy>
            <esa:clearedBy>
			  GMPC communication with one Emergency Push Destination successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Correct one of the Emergency Push Destinations.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
    <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>122</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Failed to send message to MPP
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded to send message to MPP
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MPP</esa:moduleId>
        <esa:errorCode>123</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MPP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MPP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to HTTPServer failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to HTTPServer restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>124</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The HTTPServer ports are stopped due to an internal GMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Some of the plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Succeeded to stop HTTP server
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded to start HTTP server
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the plug-ins. If a plug-in is down, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>SOAPServer</esa:moduleId>
        <esa:errorCode>331</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>SOAPServer</esa:modelDescription>
        <esa:activeDescription>The SOAPServer ports are stopped due to an internal GMPC failure.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Some of the plug-ins are down.
			</esa:description>
            <esa:alarmingObject>
			  SOAPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Succeeded to stop SOAPServer
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded to start SOAPServer
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the plug-ins. If a plug-in is down, restart it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>lanmonitor</esa:moduleId>
        <esa:errorCode>125</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>lanmonitor</esa:modelDescription>
        <esa:activeDescription>The specified host is not available.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>523</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The monitored host is down or a network problem occurs.
			</esa:description>
            <esa:alarmingObject>
			  lanmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  LAN down
			</esa:raisedBy>
            <esa:clearedBy>
			  LAN up
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the monitored host and the network.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>126</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>127</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MPP</esa:moduleId>
        <esa:errorCode>128</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MPP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MPP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>129</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MPP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MPP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>130</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPRouter lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPRouter active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>354</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to IMSRDF lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to IMSRDF active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>131</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>210</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPE112 lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPE112 active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPE112</esa:moduleId>
        <esa:errorCode>211</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPE112</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPE112
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor active
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor lost
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>132</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to NetworkStorage lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to NetworkStorage active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPATI</esa:moduleId>
        <esa:errorCode>133</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPATI</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPATI
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPRouter lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPRouter active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>134</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPATI lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPATI active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>135</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to TriggerLocation is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to TriggerLocation is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>136</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>265</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to AllPhone is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to AllPhone is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AllPhone</esa:moduleId>
        <esa:errorCode>266</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AllPhone</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  AllPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>306</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to AnyPhone is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to AnyPhone is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AnyPhone</esa:moduleId>
        <esa:errorCode>307</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AnyPhone</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  AnyPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AllPhone</esa:moduleId>
        <esa:errorCode>267</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AllPhone</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  AllPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>SOAPServer</esa:moduleId>
        <esa:errorCode>332</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>SOAPServer</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  SOAPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>SOAPServer</esa:moduleId>
        <esa:errorCode>333</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>SOAPServer</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  SOAPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>334</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to SOAPServer lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to SOAPServer active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>335</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Wireline lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Wireline active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Wireline</esa:moduleId>
        <esa:errorCode>336</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Wireline</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Wireline
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>342</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to RequestMonitor lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to RequestMonitor active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>355</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>344</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to Billing lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to Billing active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>356</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to PPRouter lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to PPRouter active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

	<esa:alarmSpecification active="yes">
        <esa:moduleId>PPRouter</esa:moduleId>
        <esa:errorCode>357</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PPRouter</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PPRouter
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to IMSRDF lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to IMSRDF active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

	<esa:alarmSpecification active="yes">
			<esa:moduleId>IMSRDF</esa:moduleId>
			<esa:errorCode>365</esa:errorCode>
			<esa:severity>4</esa:severity>
			<esa:modelDescription>IMSRDF</esa:modelDescription>
			<esa:activeDescription>DBGW is not reachable from GMPC.</esa:activeDescription>
			<esa:eventType>2</esa:eventType>
			<esa:probableCause>158</esa:probableCause>
			<esa:documentation>
				<esa:description>
				 The DBGW is failed or the network is unavailable.
				</esa:description>
				<esa:alarmingObject>
				  IMSRDF
				</esa:alarmingObject>
				<esa:raisedBy>
				 Connection to DBGW lost
				</esa:raisedBy>
				<esa:clearedBy>
				 Connection to DBGW restore
				</esa:clearedBy>
				<esa:proposedRepairAction>
				  Restart the DBGW and confirm the network is OK.
				</esa:proposedRepairAction>
			</esa:documentation>
		</esa:alarmSpecification>


		<esa:alarmSpecification active="yes">
			<esa:moduleId>IMSRDF</esa:moduleId>
			<esa:errorCode>366</esa:errorCode>
			<esa:severity>5</esa:severity>
			<esa:modelDescription>IMSRDF</esa:modelDescription>
			<esa:activeDescription>One database of DBGW fails to provide service.</esa:activeDescription>
			<esa:eventType>2</esa:eventType>
			<esa:probableCause>158</esa:probableCause>
			<esa:documentation>
				<esa:description>
				  One database of DBGW fails or the network between the DBGW and database is unavailable.
				</esa:description>
				<esa:alarmingObject>
				  IMSRDF
				</esa:alarmingObject>
				<esa:raisedBy>
				Single DBGW database fails
				</esa:raisedBy>
				<esa:clearedBy>
				 Single DBGW database retores
				</esa:clearedBy>
				<esa:proposedRepairAction>
				 Restart the database and confirm the network is OK.
				</esa:proposedRepairAction>
			</esa:documentation>
		</esa:alarmSpecification>
     
	<esa:alarmSpecification active="yes">
	  <esa:moduleId>IMSRDF</esa:moduleId>
	  <esa:errorCode>367</esa:errorCode>
	  <esa:severity>4</esa:severity>
	  <esa:modelDescription>IMSRDF</esa:modelDescription>
	  <esa:activeDescription>Both databases of DBGW fail to provide service.</esa:activeDescription>
	  <esa:eventType>2</esa:eventType>
	  <esa:probableCause>158</esa:probableCause>
	  <esa:documentation>
		  <esa:description>
			Both databases of DBGW fail or network between the dabases and DBGW is failed.
		  </esa:description>
		  <esa:alarmingObject>
			IMSRDF
		  </esa:alarmingObject>
		  <esa:raisedBy>
		   Both DBGW databases fail
		  </esa:raisedBy>
		  <esa:clearedBy>
			Both DBGW databases restore
		  </esa:clearedBy>
		  <esa:proposedRepairAction>
		  Restart both databases and confirm the network is OK.
		  </esa:proposedRepairAction>
	  </esa:documentation>
  </esa:alarmSpecification>
     
	<esa:alarmSpecification active="yes">
	  <esa:moduleId>IMSRDF</esa:moduleId>
	  <esa:errorCode>368</esa:errorCode>
	  <esa:severity>4</esa:severity>
	  <esa:modelDescription>IMSRDF</esa:modelDescription>
	  <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
	  <esa:eventType>2</esa:eventType>
	  <esa:probableCause>158</esa:probableCause>
	  <esa:documentation>
		  <esa:description>
			The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
		  </esa:description>
		  <esa:alarmingObject>
			IMSRDF
		  </esa:alarmingObject>
		  <esa:raisedBy>
		   Connection from IMSRDF to WireLine lost
		  </esa:raisedBy>
		  <esa:clearedBy>
		   Connection from IMSRDF to WireLine active	
		  </esa:clearedBy>
		  <esa:proposedRepairAction>
		 Start the component and wait until the state is started or active.
		  </esa:proposedRepairAction>
	  </esa:documentation>
  </esa:alarmSpecification>


    <esa:alarmSpecification active="yes">
        <esa:moduleId>Wireline</esa:moduleId>
        <esa:errorCode>337</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Wireline</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  Wireline
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to MLP lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to MLP active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>138</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Database failed connection test.
			</esa:raisedBy>
            <esa:clearedBy>
			  Database passed connection test.
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AllPhone</esa:moduleId>
        <esa:errorCode>268</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AllPhone</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  AllPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to database failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to database restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>AnyPhone</esa:moduleId>
        <esa:errorCode>308</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>AnyPhone</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  AnyPhone
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to database failed
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to database restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>CWSL</esa:moduleId>
        <esa:errorCode>269</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>CWSL</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  CWSL
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to database lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to database active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Wireline</esa:moduleId>
        <esa:errorCode>330</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>Wireline</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  Wireline
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to database lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to database active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>345</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>IMSRDF</esa:modelDescription>
        <esa:activeDescription>The communication with the database fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The database or the DB interface is down.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to database lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to database active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the database if the checking result is an error or it has been down. If the database status is normal, restart the component and wait till the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>901</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Emergency call establishment is successful.</esa:modelDescription>
        <esa:activeDescription>Emergency call establishment is successful.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Call establish successful.
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Call establish successful
			</esa:raisedBy>
            <esa:clearedBy>
			  Call establish successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Call establish successful
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>902</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Problems occur during emergency call establishment</esa:modelDescription>
        <esa:activeDescription>Problems occur during emergency call establishment</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			 Problems occur during emergency call establishment
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problems occur during emergency call establishment
			</esa:raisedBy>
            <esa:clearedBy>
			  Problems occur during emergency call establishment
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  No
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>903</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Problems occur during emergency call establishment</esa:modelDescription>
        <esa:activeDescription>SIP SUBSCRIBE is rejected with error from E-CSCF</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			 Problems occur during emergency call establishment
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problems occur during emergency call establishment
			</esa:raisedBy>
            <esa:clearedBy>
			  Problems occur during emergency call establishment
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  No
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>905</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Problems occur during emergency call establishment</esa:modelDescription>
        <esa:activeDescription>HSS interrogation failure</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			 Problems occur during emergency call establishment
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problems occur during emergency call establishment
			</esa:raisedBy>
            <esa:clearedBy>
			  Problems occur during emergency call establishment
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  No
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>IMSRDF</esa:moduleId>
        <esa:errorCode>906</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Problems occur during emergency call establishment</esa:modelDescription>
        <esa:activeDescription>PSAP Not Found</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			 Problems occur during emergency call establishment
			</esa:description>
            <esa:alarmingObject>
			  IMSRDF
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problems occur during emergency call establishment
			</esa:raisedBy>
            <esa:clearedBy>
			  Problems occur during emergency call establishment
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  No
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>423</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LocationDataStream is lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LocationDataStream is restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RANEventLocation</esa:moduleId>
        <esa:errorCode>506</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RANEventLocation</esa:modelDescription>
        <esa:activeDescription>The GMPC receives one RANLocation record with an invalid record type from a SMPC connection.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>23</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The SMPC sends a wrong RANLocation record.
			</esa:description>
            <esa:alarmingObject>
			  RANEventLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Failed to parse RANLocation record
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Disconnect from the SMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>	
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>359</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>360</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM continued unavailable, warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>361</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication with the license manager is down.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license manager is not started.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to LM continued unavailable, hard limit
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to LM reestablished
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the license manager is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>140</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The used total capacity is more than the configured first warning level.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is getting close to the maximum licensed capacity allowed by the license. Otherwise the used capacity is getting close to the maximum licensed capacity set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed lowest level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed lowest level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>141</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The used total capacity is more than the configured second warning level.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is getting close to the maximum licensed capacity allowed by the license. Otherwise the used capacity is getting close to the maximum licensed capacity set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed middle level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed middle level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>142</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The used total capacity is more than the maximum licensed capacity.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  If the current usage license is a capacity usage license, the used capacity is at the maximum limit allowed by the license. Otherwise the used capacity is at the maximum limit set by the parameter MaxSupportedCapacity.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used capacity passed hard limit upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used capacity passed hard limit downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  If the current usage license is a capacity usage license, order a new capacity license and install it. Otherwise set the MaxSupportedCapacity parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>143</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>144</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>145</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>152</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>153</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>154</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>

    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>502</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>503</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>504</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>


    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>161</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>162</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>163</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>164</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>165</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>166</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>167</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>168</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>169</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>170</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>171</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>172</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>173</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>174</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>175</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>176</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>177</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>178</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>180</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>181</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>182</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>194</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>195</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>196</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>262</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>263</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>264</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>221</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>222</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>223</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>226</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>227</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>228</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>231</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>232</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>233</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>236</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>237</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>238</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>241</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>242</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>243</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>246</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>247</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>248</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>251</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>252</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>253</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>256</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>257</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>258</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>158</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>159</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>160</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>272</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>273</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>274</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>311</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>312</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>313</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>316</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>317</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>318</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>321</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>322</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>323</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>326</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>327</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>328</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>342</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>343</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>344</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>435</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>436</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>437</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>440</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>441</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>442</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>463</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>464</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>465</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>445</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>446</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>447</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>481</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>482</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>483</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>457</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>458</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>459</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>491</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>492</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>493</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>473</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, first warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, first warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>474</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key is about to expire.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key is about to expire.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license expiring, second warning
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license ceased expiring, second warning
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>475</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The time limited license key has expired.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The license key has expired.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Time limited license has expired
			</esa:raisedBy>
            <esa:clearedBy>
			  Time limited license is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Order a new license key and install it.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>197</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The SSL certificate is about to expire or has already expired.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The certificate is about to expire or has already expired.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  SSL/TLS unavailable
			</esa:raisedBy>
            <esa:clearedBy>
			  SSL/TLS available
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Renew the certificate by contacting the certificate authority that signed the current certificate.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>198</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The SSL certificate is about to expire or has already expired.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The certificate is about to expire or has already expired.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  SSL certificate expire warning
			</esa:raisedBy>
            <esa:clearedBy>
			  SSL certificate is OK
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Renew the certificate by contacting the certificate authority that signed the current certificate.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>199</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to communicate with the RequestMonitor component due to congestion.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GSM positioning traffic in the location server is overloading.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Congestion to RequestMonitor
			</esa:raisedBy>
            <esa:clearedBy>
			  Congestion to RequestMonitor has ceased
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Increase the capacity of the GMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MPP</esa:moduleId>
        <esa:errorCode>200</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>MPP</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to communicate with the RequestMonitor component due to congestion.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GSM positioning traffic in the location server is overloading.
			</esa:description>
            <esa:alarmingObject>
			  MPP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Congestion
			</esa:raisedBy>
            <esa:clearedBy>
			  No congestion
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Increase the capacity of the GMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Authority</esa:moduleId>
        <esa:errorCode>201</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>Authority</esa:modelDescription>
        <esa:activeDescription>The capacity limit is reached for an LCS client.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The traffic in an LCS client is too high.
			</esa:description>
            <esa:alarmingObject>
			  Authority
			</esa:alarmingObject>
            <esa:raisedBy>
			  Capacity limit reached for LCS client
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Decrease the amount of traffic, or increase the capacity for the specific LCS client.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>MLP</esa:moduleId>
        <esa:errorCode>202</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>MLP</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to communicate with the TriggerLocation component, due to congestion.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>207</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GSM positioning traffic in the location server is overloading.
			</esa:description>
            <esa:alarmingObject>
			  MLP
			</esa:alarmingObject>
            <esa:raisedBy>
			  Congestion to TriggerLocation
			</esa:raisedBy>
            <esa:clearedBy>
			  Congestion to TriggerLocation has ceased
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Increase the capacity of the GMPC.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>203</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The SMS sending reaches the top limit.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The traffic in the TriggerLocation component is too high.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  Forced Location Updates Congestion
			</esa:raisedBy>
            <esa:proposedRepairAction>
			  Decrease the amount of the traffic for the TriggerLocation component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>CWSL</esa:moduleId>
        <esa:errorCode>300</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>CWSL</esa:modelDescription>
        <esa:activeDescription>The SLR receiving at CWSL reaches the top limit.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The traffic in the CWSL component is too high.
			</esa:description>
            <esa:alarmingObject>
			  CWSL
			</esa:alarmingObject>
            <esa:raisedBy>
			  Notification capacity passed the warning level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Notification capacity passed the warning level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Decrease the amount of the traffic for the CWSL component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>TriggerLocation</esa:moduleId>
        <esa:errorCode>301</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>TriggerLocation</esa:modelDescription>
        <esa:activeDescription>The SLR receiving at TriggerLocation reaches the top limit.</esa:activeDescription>
        <esa:eventType>1</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The traffic in the TriggerLocation component is too high.
			</esa:description>
            <esa:alarmingObject>
			  TriggerLocation
			</esa:alarmingObject>
            <esa:raisedBy>
			  SLR capacity passed the warning level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  SLR capacity passed the warning level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Decrease the amount of the traffic for the TriggerLocation component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>204</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Calculating the logical ISP file is impossible.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The logical ISP file is not readable or writable.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  ISP: Logical calculation successful
			</esa:raisedBy>
            <esa:clearedBy>
			  ISP: Logical calculation failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the permission of the /var/opt/mpc/ISP folder and the logical*.isp files.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>FDSCore</esa:moduleId>
        <esa:errorCode>206</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>FDSCore</esa:modelDescription>
        <esa:activeDescription>The plug-in is inactive.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The PluginManager reports that the plug-in stated in the message is inactive for some reason.
			</esa:description>
            <esa:alarmingObject>
			  FDSCore
			</esa:alarmingObject>
            <esa:raisedBy>
			  FDSComponentManager:PluginDied
			</esa:raisedBy>
            <esa:clearedBy>
			  FDSComponentManager:PluginRecovered
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the plug-in.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>FDSCore</esa:moduleId>
        <esa:errorCode>362</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>FDSCore</esa:modelDescription>
        <esa:activeDescription>The plug-in is inactive.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The PluginManager reports that the plug-in stated in the message is inactive for some reason.
			</esa:description>
            <esa:alarmingObject>
			  FDSCore
			</esa:alarmingObject>
            <esa:raisedBy>
			  FDSComponentManager:PluginRecoveryFailed
			</esa:raisedBy>
            <esa:clearedBy>
			  FDSComponentManager:PluginRecovered
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Restart the plug-in.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>Statistics</esa:moduleId>
        <esa:errorCode>207</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>Statistics</esa:modelDescription>
        <esa:activeDescription>Problems reading from or writing to a file</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file name or path is wrong.
			</esa:description>
            <esa:alarmingObject>
			  Statistics
			</esa:alarmingObject>
            <esa:raisedBy>
			  Statistics file error
			</esa:raisedBy>
            <esa:clearedBy>
			  Statistics file success
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the file exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>215</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The connection to the data store is lost.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is not running or the network is down.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store connection recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store connection failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the network connection and the data store status.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>216</esa:errorCode>
        <esa:severity>5</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store is invalidated.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>554</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is invalidated or restarted.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store invalidation recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store invalidated
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Disconnect and connect data store.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>217</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store replication is fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store replication agent is not running or the replication state is abnormal.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Data store replication recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Data store replication failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the replication agent status and the replication state.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>218</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The data store capacity usage passes the warning level.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The data store is getting full.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  The data store capacity usage recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  The data store capacity usage passed warning level
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check the TimesTen database size. Remove the unnecessary data from the database, or expand the TimesTen license and hardware to keep all the current data and add new data into the TimesTen database. Check the replication agent status and the replication state.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>350</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>Heartbeat cannot be sent to the received GMPC node(s) successfully.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Something wrong with network or the received GMPC node(s).
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  Sending heartbeat recovered
			</esa:raisedBy>
            <esa:clearedBy>
			  Sending heartbeat failed
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure the received GMPC node(s) work normally and nothing wrong with the network.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>HTTPServer</esa:moduleId>
        <esa:errorCode>347</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>HTTPServer</esa:modelDescription>
        <esa:activeDescription>The TCP port of the LCS client interface is already in use.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The TCP port is already in use.
			</esa:description>
            <esa:alarmingObject>
			  HTTPServer
			</esa:alarmingObject>
            <esa:raisedBy>
			  TCP port is available for use
			</esa:raisedBy>
            <esa:clearedBy>
			  TCP port is already in use
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Change the settings of the program that use the TCP port to free the port, then unload and restart the HTTPServer component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>348</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>The TCP port of the SUPL SET interface is already in use.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The TCP port is already in use.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  TCP port is available for use
			</esa:raisedBy>
            <esa:clearedBy>
			  TCP port is already in use
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Change the settings of the program that use the TCP port to free the port, then unload and restart the UPEngine component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>ttmonitor</esa:moduleId>
        <esa:errorCode>349</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>ttmonitor</esa:modelDescription>
        <esa:activeDescription>The TCP port of heartbeat listener is already in use.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>1024</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The TCP port is already in use.
			</esa:description>
            <esa:alarmingObject>
			  ttmonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  TCP port is available for use
			</esa:raisedBy>
            <esa:clearedBy>
			  TCP port is already in use
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Change the settings of the program that use the TCP port to free the port, then unload and restart the ttmonitor component.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>291</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the AECID SFTP server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Network issue 2) The AECID SFTP server is not started. 3) Error in the configuration of the SFTP to the AECID SFTP server.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: Connection to AECID SFTP server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: Connection to AECID SFTP server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Ensure the network is working normally 2) Start the AECID SFTP server 3) Ensure the configuration of the SFTP to the AECID SFTP server is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>292</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The system ID is not set.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>606</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The system ID is not set.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: System ID is not set
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: System ID is set
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Set the system ID.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>293</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The  AECID SFTP server address is not set.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>606</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The AECID SFTP server address is not set.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AECID: AECID SFTP server address is not set
			</esa:raisedBy>
            <esa:clearedBy>
			  AECID: AECID SFTP server address is set
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Set AECID SFTP server address.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>411</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The SFTP client fails to connect to the GMPC SFTP server.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>505</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Network issue 2) The GMPC SFTP server is not started. 3) Error in the configuration of the SFTP to the GMPC SFTP server.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  GMPC: Connection to GMPC SFTP server failed
			</esa:raisedBy>
            <esa:clearedBy>
			  GMPC: Connection to GMPC SFTP server successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Ensure the network is working normally 2) Start the GMPC SFTP server 3) Ensure the configuration of the SFTP to the GMPC SFTP server is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>296</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>Any GMPC connection fails to bind to the SMSC.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Network issue 2) The SMSC is not started. 3) Error in the configuration of the Bind.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  SMPP: One connection binding to SMSC failed
			</esa:raisedBy>
            <esa:clearedBy>
			  SMPP: All connections binding to SMSC successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Ensure the network is working normally 2) Start the SMSC 3) Ensure the configuration of Bind is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>297</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>Any GMPC connection fails to connect to the SMSC.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Network issue 2) The SMSC is not started. 3) Error in the configuration of the Bind. 4) Error in the configuration of the EnquireLink.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  SMPP: One connection connecting to SMSC failed
			</esa:raisedBy>
            <esa:clearedBy>
			  SMPP: All connections connecting to SMSC successful
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Ensure the network is working normally 2) Start the SMSC 3) Ensure the configuration of Bind is right 4) Ensure the configuration of EnquireLink is right.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>298</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>Any PLMN has no connection to send the SubmitSm message to the SMSC.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>22</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  1) Network issue 2) The SMSC is not started. 3) Error in the configuration of the Bind. 4) Error in the configuration of the EnquireLink. 5) The SMSC is busy.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  SMPP: One PLMN has no connection to send SubmitSm message
			</esa:raisedBy>
            <esa:clearedBy>
			  SMPP: All PLMNs have at least one connection to send SubmitSm messag
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  1) Ensure the network is working normally 2) Start the SMSC 3) Ensure the configuration of Bind is right 4) Ensure the configuration of EnquireLink is right 5) Wait the SMSC idle.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>UPEngine</esa:moduleId>
        <esa:errorCode>370</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>UPEngine</esa:modelDescription>
        <esa:activeDescription>Number of SUPL triggers exceeds the threshold.</esa:activeDescription>
        <esa:eventType>3</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The number of SUPL triggers in database is too much.
			</esa:description>
            <esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
            <esa:raisedBy>
			  Number of SUPL triggers exceeds the threshold
			</esa:raisedBy>
            <esa:clearedBy>
			  Number of SUPL triggers restored
			</esa:clearedBy>
            <esa:proposedRepairAction>
			 Delete the useless SUPL triggers or adjust suitable threshold in configuration.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>381</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problem in creating a positioning record file.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file path or permissions are wrong.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problem while creating positioning record file
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded while creating positioning record file
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>382</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>Problem in creating a temporary positioning record file.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>161</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The file path or permissions are wrong.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problem while creating temporary positioning record file
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded in creating temporary positioning record file
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the path exists and has the right permissions.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>384</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The used disk size is more than the configured warning level.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The used disk size is getting close to the value set by the parameter TotalSize.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Used disk size passed warning level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  Used disk size passed warning level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Remove the positioning record file or set the TotalSize parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>412</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The used disk size is more than the configured warning level.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>541</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The used disk size is getting close to the value set by the parameter TotalSize.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  GMPC: Used disk size passed warning level upwards
			</esa:raisedBy>
            <esa:clearedBy>
			  GMPC: Used disk size passed warning level downwards
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Remove the record file or set the TotalSize parameter.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>385</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The plugin failed to connect to encryption key server or it is not responding.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The plugin failed to connect to encryption key server or it is not responding.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  Problem while connecting to encryption key server
			</esa:raisedBy>
            <esa:clearedBy>
			  Succeeded in connecting to encryption key server
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Make sure the network works well, and the key server is reachable from the Ericsson Mobile Positioning System.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
        <esa:errorCode>402</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The Assistance Data Server is marked as containing invalid data by the MPS server.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  A GLONASS alarm has arrived, GLONASS corrections have been detected faulty, or the data transfer has stopped and validation time for the data has expired.
			</esa:description>
            <esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data from reference network is invalid
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data from reference network is valid again
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if Assistance Data alarm is active, if so, refer to that alarm. Check the connection to the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
        <esa:errorCode>403</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Assistance data was not received within the user-defined time interval.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GLONASS receiver is down or no connection to it is active.
			</esa:description>
            <esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data has stopped arriving from reference network
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data has started arriving from reference network
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Assistance Data Server is up and running, and the host is reachable from the MPS. Also compare ADTimeLimit with the configured time intervals used by Assistance Data Server when requesting assistance data from the Assistance Data Server.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
        <esa:errorCode>405</esa:errorCode>
        <esa:severity>3</esa:severity>
        <esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>The plug-in fails to connect to the GLONASS reference network or it does not respond.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The GLONASS reference network is down or is not responding.
			</esa:description>
            <esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data service failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data service active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the GLONASS reference network is up and running, and the host is reachable from the MPS.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>GnssAssistanceDataHandler</esa:moduleId>
        <esa:errorCode>406</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>GnssAssistanceDataHandler</esa:modelDescription>
        <esa:activeDescription>Problems occur when communicating with an assistance data provider.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The assistance data provider is unavailable or cannot provide valid assistance data.
			</esa:description>
            <esa:alarmingObject>
			  GnssAssistanceDataHandler
			</esa:alarmingObject>
            <esa:raisedBy>
			  Assistance data provider failure
			</esa:raisedBy>
            <esa:clearedBy>
			  Assistance data provider active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the assistance data provider is up and running, and the correct assistance data are provided.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>PacketLocationFeeder</esa:moduleId>
        <esa:errorCode>390</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>PacketLocationFeeder</esa:modelDescription>
        <esa:activeDescription>The communication between the GMPC internal software components fails.</esa:activeDescription>
        <esa:eventType>2</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The requested component is not started or is restarting. Or an error occurs in the address configuration for the requesting component.
			</esa:description>
            <esa:alarmingObject>
			  PacketLocationFeeder
			</esa:alarmingObject>
            <esa:raisedBy>
			  Connection to CWSL lost
			</esa:raisedBy>
            <esa:clearedBy>
			  Connection to CWSL active
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Start the component and wait until the state is started or active.
        	</esa:proposedRepairAction>
	</esa:documentation>
    </esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>UPEngine</esa:moduleId>
		<esa:errorCode>415</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>UPEngine</esa:modelDescription>
		<esa:activeDescription>This alarm is generated when the SLC Interface is closed due to internal GMPC failure.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The SLC Interface is closed due to internal GMPC failure.
			</esa:description>
			<esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
			<esa:raisedBy>
			  SLC Interface is closed
			</esa:raisedBy>
			<esa:clearedBy>
			  SLC Interface is open
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Check the plug-ins. If a plug-in is down, restart it.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>UPEngine</esa:moduleId>
		<esa:errorCode>416</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>UPEngine</esa:modelDescription>
		<esa:activeDescription>The SSL certificate is invalid or has already expired.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The certificate is invalid or has already expired.
			</esa:description>
			<esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
			<esa:raisedBy>
			  SLC SSL/TLS unavailable
			</esa:raisedBy>
			<esa:clearedBy>
			  SLC SSL/TLS available
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Renew the certificate by contacting the certificate authority that signed the current certificate..
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
		<esa:moduleId>UPEngine</esa:moduleId>
		<esa:errorCode>417</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>UPEngine</esa:modelDescription>
		<esa:activeDescription>This alarm is generated when unsecure ILP ports is already in use.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The unsecure ILP ports is already in use.
			</esa:description>
			<esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
			<esa:raisedBy>
	         Unsecure port is already in use		  
			</esa:raisedBy>
			<esa:clearedBy>
			 Unsecure port is available for use
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Change the settings of the program that use the TCP port to free the port, then unload and restart the SLCListener component.
			</esa:proposedRepairAction>
		</esa:documentation>
	    </esa:alarmSpecification>
		<esa:alarmSpecification active="yes">
		<esa:moduleId>UPEngine</esa:moduleId>
		<esa:errorCode>418</esa:errorCode>
		<esa:severity>4</esa:severity>
		<esa:modelDescription>UPEngine</esa:modelDescription>
		<esa:activeDescription>This alarm is generated when secure ILP ports is already in use or certificate is invalid.</esa:activeDescription>
		<esa:eventType>2</esa:eventType>
		<esa:probableCause>158</esa:probableCause>
		<esa:documentation>
			<esa:description>
			  The secure ILP ports is already in use or certificate is invalid.
			</esa:description>
			<esa:alarmingObject>
			  UPEngine
			</esa:alarmingObject>
			<esa:raisedBy>
	         Secure port is already in use		  
			</esa:raisedBy>
			<esa:clearedBy>
			 Secure port is available for use
			</esa:clearedBy>
			<esa:proposedRepairAction>
			  Change the settings of the program that use the TCP port to free the port or renew the certificate, then unload and restart the SLCListener component.
			</esa:proposedRepairAction>
		</esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
	    <esa:moduleId>Authority</esa:moduleId>
	    <esa:errorCode>613</esa:errorCode>
	    <esa:severity>6</esa:severity>
	    <esa:modelDescription>Authority</esa:modelDescription>
	    <esa:activeDescription>This alarm is generated when a positioning request is attempted for an unauthorized subscriber.</esa:activeDescription>
	    <esa:eventType>1</esa:eventType>
	    <esa:probableCause>444</esa:probableCause>
	    <esa:documentation>
		<esa:description>
		  The positioning request violates the authentication rule.
		</esa:description>
		<esa:alarmingObject>
		  Authority
		</esa:alarmingObject>
		<esa:raisedBy>
		  Positioning request rejected
		</esa:raisedBy>
		<esa:proposedRepairAction>
		  Check the allowed list and barred list for the client. if the request is legal, update  the related item in the allowed and barred list.
		</esa:proposedRepairAction>
	    </esa:documentation>
	</esa:alarmSpecification>
	<esa:alarmSpecification active="yes">
        <esa:moduleId>CWSL</esa:moduleId>
        <esa:errorCode>476</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>CWSL</esa:modelDescription>
        <esa:activeDescription>The stored subscribers for the Passive Location VP exceeds the defined quantity in the license.</esa:activeDescription>
        <esa:eventType>5</esa:eventType>
        <esa:probableCause>1025</esa:probableCause>
        <esa:documentation>
            <esa:description>
              The number of subscribers monitored by Passive Location is greater than the limit defined in the license.
            </esa:description>
            <esa:alarmingObject>
              CWSL
            </esa:alarmingObject>
            <esa:raisedBy>
              The stored subscribers for Passive Location VP exceeds the defined quantity in the license
            </esa:raisedBy>
            <esa:clearedBy>
              The stored subscribers for Passive Location VP is less than the defined quantity in the license
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Order a new license key that allows more subscribers, and install it.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>CWSL</esa:moduleId>
        <esa:errorCode>477</esa:errorCode>
        <esa:severity>6</esa:severity>
        <esa:modelDescription>CWSL</esa:modelDescription>
        <esa:activeDescription>The stored subscribers for the Passive Location VP over 90% of the defined quantity in the license.</esa:activeDescription>
        <esa:eventType>5</esa:eventType>
        <esa:probableCause>1025</esa:probableCause>
        <esa:documentation>
            <esa:description>
              The number of subscribers monitored by Passive Location is more than 90% of the limit defined  in the license.
            </esa:description>
            <esa:alarmingObject>
              CWSL
            </esa:alarmingObject>
            <esa:raisedBy>
              The stored subscribers for Passive Location VP over 90% of the defined quantity in the license
            </esa:raisedBy>
            <esa:clearedBy>
              The stored subscribers for Passive Location VP do not over 90% of the defined quantity in the license
            </esa:clearedBy>
            <esa:proposedRepairAction>
              Order a new license key that allows more subscribers, and install it.
            </esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>621</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>The communication with the Access Key server is down.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Access Key server is not started.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Connect to access key server failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Connect to access key server successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Access Key server is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>
    <esa:alarmSpecification active="yes">
        <esa:moduleId>RequestMonitor</esa:moduleId>
        <esa:errorCode>621</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>RequestMonitor</esa:modelDescription>
        <esa:activeDescription>The communication with the Access Key server is down.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  The Access Key server is not started.
			</esa:description>
            <esa:alarmingObject>
			  RequestMonitor
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Connect to access key server failed Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Connect to access key server successful Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Check if the Access Key server is started and the communication with it is active.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>    
    <esa:alarmSpecification active="yes">
        <esa:moduleId>OM</esa:moduleId>
        <esa:errorCode>622</esa:errorCode>
        <esa:severity>4</esa:severity>
        <esa:modelDescription>OM</esa:modelDescription>
        <esa:activeDescription>At least one of the installed Access Key is expired or about to expire in fourteen days.</esa:activeDescription>
        <esa:eventType>4</esa:eventType>
        <esa:probableCause>158</esa:probableCause>
        <esa:documentation>
            <esa:description>
			  Access Key is expired or about to expire in fourteen days.
			</esa:description>
            <esa:alarmingObject>
			  OM
			</esa:alarmingObject>
            <esa:raisedBy>
			  AccessKey: Access key is expired or about to expire Alarm
			</esa:raisedBy>
            <esa:clearedBy>
			  AccessKey: Access key is not expired or about to expire Alarm
			</esa:clearedBy>
            <esa:proposedRepairAction>
			  Delete expired Access Key or request and install new Access Key.
			</esa:proposedRepairAction>
        </esa:documentation>
    </esa:alarmSpecification>      
</esa:alarmDefinitions>
"
}]